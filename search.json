[{"title":"读书和写作","url":"/2020/04/20/读书和写作/","content":"\n高中读了很多书，大学没怎么读书，反而是看了很多小说，打了很多游戏。\n\n最近突然惊觉，应该继续读书了。同时和很优秀的几位朋友和前辈聊了一下，决定要开始认真的写作了。用写作来作为知识和思考的积累方式。\n\n<!--more-->\n\n看啥书？\n\n看专业书籍，文学书籍，以及引人思考的blog\n\n写什么？\n\n写所有想写的，越多越好。同时一周保持一篇有质量的技术文档。\n\n怎么写？\n\n真不知道怎么写。重新看on writing吧。。\n\n如何进行分发，如何和人进行讨论？\n\n分发和讨论先自己去找认识的人吧。\n\n// TODO","tags":["思考"],"categories":["随笔"]},{"title":"考研与未来的方向","url":"/2020/04/20/考研与未来的方向/","content":"\n由于这一场超乎想象的疫情，我大学以来最重要的一个学期，一个思考的转折点在家中度过。在家开学4周之后，随着许多的朋友，学长开始走向新的人生方向，或是努力保研，或者准备考研，亦或者是开始寻找实习。我也开始真正意义上开始去寻找，去决定我未来两年的方向。\n\n<!--more-->\n\n其实对于我来说只有两个方向可以去选择：考研，工作。当然这是十分笼统的方向，考什么专业的研，做什么方向，考研的目的是什么？是以找开发工作为导向的考研，还是以进一步进军学术界为方向的考研？工作的选择就更多了。去做一个什么方向的工作，去什么样的岗位。可以接受什么样的薪资和工作强度？在什么城市？选择一个什么样的行业？真是复杂。本以为大学比高中长，结果却是比高中短。短到只有一年半就必须去思考。\n\n又到了一个选择决定努力的环节了。先不聊选择，聊聊怎么努力。如果工作，那么我现在就应该以工作为导向去学点真正有用的技术了。而且要学深。如果考研，那就以考研为导向去学习，最好能在大三前就确定研究的大致方向，增加考研竞争力。还有两个通用指标：英语和算法。\n\n再看看现在的社会背景。未来一到两年整体经济发展肯定会因为疫情受到打击，就业形势肯定不会太好。同样的，随着大学的扩招和就业形势的问题，计算机会是一个持续热门的方向。考研难度也会增大。同时，我在广东，在华师。华师称不上什么好学校，但在省内还勉强是第二梯队。根据我以往的在广东省内发展的想法，考研想博得一个更好的平台就只有中大和华工两个选择。这内卷程度。。。怕了怕了。同样的，在就业方面，华师很难给我一个很好的平台。但是还是有资格去递一下下简历的。递完简历之后，当然就看个人能力了。没能力读研和工作都没得用。\n\n聊一下周围人的情况。我不止一个人对我说，要不就保研要不就工作。同样有不止一个人对我说一定要有一个研究生文凭。这要怎么选择呢？我觉得还是要看自己未来的一个发展方向。如果追求的是安逸，那么一个研究生文凭相当有用。如果追求的是突破阶级，是奋斗是赚大钱，那么可能自身的能力更重要一点。无味的三年或是两年研究生，加上一年的准备时间可能是生命的浪费。但是有几个人的能力能达到呢？就算是不考研究生多个几年又怎么样呢......\n\n我的目标是靠自己的能力在深圳快乐的活下去。因为只有这样才能真正的融入这个城市。我是爱这座新城的，我认可他的价值观，我在这长大，我熟悉他，我在这有着很多的朋友。虽然他很皮，这疫情时房子还能涨到7万就离谱。加速，都给我加速。我还是希望能在深圳生活的。之前写到过我追求相对自由（虽然那篇文章被我屏蔽了），那我应该考研还是不考呢？考吧。思考了这么久，我需要对自己有一个明确的回答了。其实我一直都知道考研才是最好的选择。我没有金钱的压力，出来工作是能赚点钱，是可以保持一个独立和自由。可是然后呢？是呀然后呢。其实我是在畏惧着考研，毕竟考不上怎么办，还有考研真的很累的呀。过了两年舒服生活的我怎么回到一个紧张的状态里去也还是一个问题。对于我这种喜欢代码，喜欢折腾的人来说，选择工作确实轻松不少。\n\n总归还是要逼自己一把，这篇文章就为我接下来两年定一个目标——考研。那写这么长干嘛。哈哈哈哈。五年后更新。（如果我还记得的话。\n\n","tags":["思考"],"categories":["随笔"]},{"title":"计网-数据链路层","url":"/2020/04/15/计网-数据链路层/","content":"\n> 数据链路层是[OSI参考模型](https://baike.baidu.com/item/OSI参考模型)中的第二层，介乎于[物理层](https://baike.baidu.com/item/物理层/4329158)和[网络层](https://baike.baidu.com/item/网络层/4329439)之间。[数据链路](https://baike.baidu.com/item/数据链路)层在[物理层](https://baike.baidu.com/item/物理层/4329158)提供的服务的基础上向[网络层](https://baike.baidu.com/item/网络层/4329439)提供服务，其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。\n\n<!--more-->\n\n[TOC]\n\n","tags":["技术探究"],"categories":["技术"]},{"title":"计网-物理层","url":"/2020/04/11/计网-物理层/","content":"\n> **物理层**（或称物理层，Physical Layer）是[计算机网络](https://baike.baidu.com/item/计算机网络)[OSI模型](https://baike.baidu.com/item/OSI模型)中最低的一层。物理层规定:为传输数据所需要的物理链路创建、维持、拆除，而提供具有机械的，电子的，功能的和规范的特性。简单的说，物理层确保原始的[数据](https://baike.baidu.com/item/数据/5947370)可在各种物理媒体上传输。[局域网](https://baike.baidu.com/item/局域网/98626)与[广域网](https://baike.baidu.com/item/广域网/422004)皆属第1、2层。\n\n<!--more-->\n\n[TOC]\n\n## 基本概念\n\n1. 物理层考虑的是怎样才能在连接各种计算机的传输媒体上传输数据比特流，而不是指具体的传输媒体。\n\n2. 物理层的作用是要尽可能地屏蔽掉不同传输媒体和通信手段的差异。\n\n3. 物理层的主要任务:确定与传输媒体的接口的一些特性：**机械特性**、**电气特性**、**功能特性**和**过程特性**。\n\n   - 机械特性：接口所用接线器的形状和尺寸、引脚数目和排列、固定和锁定装置等\n\n   - 电气特性：接口电路的各条线上出现的电压范围\n\n   - 功能特性：某条线上出现某一电平电压的意义\n\n   - 过程特性：对于不同功能的各种可能事件的出现顺序\n\n\n## 数据通信的基础知识\n\n1. 数据通信系统的模型\n\n   数据通信系统可以划分为三大部分：**源系统**（或发送端、发送方）、**传输系统**（或传输网络）、**目的系统**（或接收端、接收方）\n\n   ![数据通信模型](https://raw.githubusercontent.com/5522MIKE/PicGo/master/md/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%A8%A1%E5%9E%8B.jpg)\n\n2. 有关信道的几个基本概念\n\n   信道：表示向某一个方向传送信息的媒体\n   \n   - 单向通信\n   - 双向交替通信\n   - 双向同时通信\n   \n   基带信号：来自信源的信号；如计算机输出的代表文字或图像的数据信号都是基带信号\n   \n   调制分类：\n   \n   - 基带调制(编码)：仅对基带信号的波形进行变换，使其能与信道特性相适应，变换后的信号仍是基带信号\n   \n   - 带通调制：使用载波进行调制，把基带信号的频率范围移到较高频段，并转换为模拟信号，变换后的信号称为带通信号\n   \n   常用的编码方式：\n   \n   - 不归零制\n   - 归零制\n   - 曼切斯特编码\n   - 差分曼切斯特编码\n   \n   基本的带通调制方法：\n   \n   - 调幅（AM）\n   - 调频（FM）\n   - 调相（PM）\n   - 特殊：正交振幅调制QAM\n   \n3. 信道的极限容量\n\n   限制码元在信道上传输速率的因素：\n\n   - 信道能够通过的频率范围    （码间串扰，奈氏准则）\n   - 信噪比    （香农公式）\n\n## 物理层下面的传输媒体\n\n**传输媒体是数据传输系统中在发送器和接收器之间的物理通路**\n\n分类：\n\n- 引导型：双绞线、同轴电缆、光纤\n- 非引导型：电磁波无线传输\n\n## 信道复用技术\n\n**复用：允许用户使用一个共享的信道进行通信，降低成本，提高利用率**\n\n- 频分复用\n- 时分复用\n- 统计时分复用\n- 波分复用WDM\n- **码分复用CDM**\n\n## 数字传输系统\n\n早期缺点：\n\n- 速率标准不统一\n- 不是同步传输\n\n现代的传输网络的传输媒体：光纤\n\n同步光纤网(SONET)：各级时钟都来自一个非常精确的主时钟，为光纤传输系统定义了同步传输的线路速率等级结构\n\n同步数字系列(SDH)：由SONET为基础发展的国际标准\n\n## 宽带接入技术\n\nADSL技术：非对称数字用户线，将原有的模拟电话线进行改造，使其能够承载宽带业务，将0-4k的低端频谱留给电话使用，将剩余部分给宽带使用，其中上行带宽小于下行带宽。\t第二代ADSL：得到更高的数据率，采用无缝速率自适应技术，可在运营中不中断通信和不产生误码的情况下，自适应的调整数据率\n\n光纤同轴混合网(HFC)：是目前覆盖面较广的有线电视网，采用模拟技术，频分复用，主干部分使用光纤，入户部分使用同轴电缆\n\nFTTx技术：是一种实现宽带居民接入网的方案，代表多种宽带光纤接入方式\n\n## 实验部分\n\n实验过程中发生了一些问题，后来发现是对原理不熟悉导致的。比如第一次配置vtp的时候没有配置trunk。一个警醒，在实验前一定要搞定所有的流程概念。","tags":["技术探究"],"categories":["技术"]},{"title":"搭建一个自己的博客","url":"/2020/04/03/开始搭建你的第一个博客/","content":"本文面向无基础学生。\n\n博客为静态博客，无需费用。\n\n使用的工具和框架：\nGitHub Pages + hexo\n\n<!--more-->\n\n## 为什么要搭建个人博客\n\n+ 将自己的思考和学习经历记录下来作为一个知识沉淀的平台\n+ 在搭建博客和升级博客的过程中学习技术\n+ 展示你自己，并且可以作为他人了解你的渠道\n+ 成为社区的一份子，帮助到他人。博客中记录的bug和经历可以让更多的人少走弯路。\n\n优秀的个人博客推荐：\n+ [轮子哥/vczh](http://cppblog.com/vczh)\n+ [鳥哥的 Linux 私房菜](http://linux.vbird.org/)\n+ [王垠](http://www.yinwang.org/)\n+ [阮一峰的个人网站](http://www.ruanyifeng.com/home.html)\n\n## 使用GitHub page + hexo快速搭建\n\n### 环境准备\n安装[Node.js](https://nodejs.org/zh-cn/)和[Git](https://git-scm.com/)并注册[GitHub](https://github.com/)\n\n安装成功检验：\n\n在命令行执行下列命令：\n```\n$ git --version\ngit version 2.9.0.windows.1\n$ node --version\nv10.15.3\n$ npm --version\n6.4.1\n```\n\n\n### 安装Hexo\n在命令行执行下列命令：\n```\n$ npm install -g hexo-cli\t# -g 代表着全局安装\n```\n\n完成后建立你的个人博客：\n```\n$ hexo init blogName\n$ cd blogName\n$ npm install\n```\n\n博客文件夹的目录如下：\n```\n├───.git\n├───scaffolds\t# 博客的模板文件夹\n├───source\t# 资源文件夹\n│   └───_posts\t# 你的博客源文件(.md)\n└───themes\t# 主题文件夹\n    └───landscape\t# 默认主题\n├───.gitignore\n├───.gitmodules\n├───_config.yml\t# 博客的配置文件\n├───package.json # 项目管理文件\n```\n\n\n### 创建你的第一篇博文\n新建一篇博文：\n```\n$ hexo new '文章标题'\n```\n\n在 ` /source/_posts `文件夹下找到你的博文，使用Markdown编辑器打开并编辑。\n\n推荐使用Typora进行编辑。\n在[Markdown Guide](https://www.markdownguide.org/basic-syntax/)或者[菜鸟教程](https://www.runoob.com/markdown/md-tutorial.html)学习Markdown语法。\n\n保存后运行：\n```\n$ hexo generate # 生成静态文件，可简写为 hexo g\n$ hexo server # 启动服务器。默认情况下，访问网址为：`http://localhost:4000/`。可以简写为 hexo s\n```\n\n此时已经可以在`public`文件夹下看到完整的静态文件。\n在浏览器中输入`http://localhost:4000/`就可以看到预览效果了。\n\n\n### 部署到GitHub Pages\n\n1. 在GitHub创建一个名为`username.github.io`的新仓库，其中`username`是您在GitHub上的用户名（或组织名称）。\n! 如果仓库的第一部分与您的用户名不完全匹配，则它将不起作用，因此请确保正确无误。\n\n2. 转到要存储项目的文件夹，然后克隆新的仓库：\n```\n$ git clone https://github.com/username/username.github.io\n```\n\n3. 将之前生成的`public`文件夹下的文件拷贝到本地仓库中。再运行：\n```\n$ git add --all\n$ git commit -m \"Initial commit\"\n$ git push -u origin master\n```\n\n4. 等待一段时间你就可以启动浏览器并转到`https://username.github.io`你就可以看到自己的博客啦！\n\n// 将博客部署到GitHub还有其他方法，比如可以使用`hexo deploy`。这个就请自行学习探索啦。\n\n### 了解并丰富你的博客\n\n以下是一些进阶网站：\n+ [超详细Hexo+Github Page搭建技术博客教程](https://segmentfault.com/a/1190000017986794)\n+ [hexo官网](https://hexo.io/zh-cn/)\n+ [GitHub Pages](https://pages.github.com/)\n\n## 进阶博客搭建\n\n想必很多同学在完成简单的静态博客搭建后都想尝试更加绚丽，互动性和自定义更强的博客。\n首先你需要购买一个域名，拥有一个服务器。\n使用[WordPress](https://zh-cn.wordpress.com/)可以快速搭建一个动态博客。\n如果你不仅仅满足于使用框架和平台，那么你可能需要去了解并学习一些更加深入的东西，前端可以用Vue或者React，后端用python的Django,Flask框架实现快速开发个人博客。","tags":["解决方案"],"categories":["技术"]},{"title":"我的win环境备份","url":"/2020/03/23/我的win环境备份/","content":"\n最近可能要重装电脑或者购置新的机器，故记录现在我需要的一台win系统的电脑应该需要什么样的环境。\n\n<!--more-->\n\n## 环境\n### 语言类\nMinGW：Windows下的基于GCC 程序开发环境  \nPHP  \nJAVA  \nNode.js  \nPython\n\n### 工具类\n\nGit：版本管理工具，必用  \nTerminal：终端，别用cmd了。   \nWSL2：win下的Linux子系统。在某些环境下很好用，比如搭配vscode写代码。  \n\n### 数据库\n\nmysql  \nsqlserver\n\n### 服务器\napache  \nnginx\n\n## 日常软件\n火绒：十分简洁的安全软件  \neverything：电脑文件查找软件，可以极快的找到文件  \n7-zip/Bandzip：优秀的压缩工具  \nInternet Download Manager：下载神器  \n搜狗输入法  \nsumatraPDF：PDF阅读器  \noffice：特别提一下visio，绘图软件  \nCAJViewer：文献阅读器，用来读知网论文很方便  \n\n## 专业工具\n### 编程类\nJetBrain全家桶(toolbox，PHPstorm，DataGrip，Clion，IDEA 等)：IDE世界里最强大的全家桶。**学生可以用.edu邮箱免费使用**  \nCodeBlocks：优秀且简单易用的C/C++IDE  \nEclipse：上古神器，一般用来写JAVA。实则干啥都能  \nVSCode：一个介于IDE和编辑器的神器。熟练使用插件和配置可以达到**awesome**的效果。  强力推荐  \nXshell：SSH客户端。我一般用来连接云服务器  \nVMware：虚拟机软件  \n\n### 工程类\nCisco Packet Tracer：网络仿真软件，学计网时候用的  \nWireshark：网络封包分析软件  \nPostman: 接口测试  \nAxure：原型设计工具，可以学生认证  \nXMind：思维导图  \n腾讯会议：用来小组讨论十分方便和稳定  \n\n### 数学、论文类\nMATLAB：数学软件。这个也有很多学校买了，可以去学校软件站看看  \nSPSS：数据分析软件  \nTypora：神仙编辑器，最好的markdown编辑器。本文就是用它写的  \nLaTeX：排版系统，用来写论文非常好  \n\n### 其他\nrufus：引导盘制作工具  \nAdobe全家桶(PS，Au，Pr 等)  \nShadowsocksR/v2rayN：科 学 上 网  \n\n## 娱乐软件\nChrome  \nFirefox  \nEdge  \nTim/QQ  \n微信  \n网易云音乐  \n百度网盘  \nPotPlayer：极强大的播放器  \nSteam(Wallpaper Engine,Fences)  \nWeGame  \nOrigin  \n\n## 一些简单的搭配应用场景\n// TODO 待更  ","tags":["技术"],"categories":["技术"]},{"title":"美赛","url":"/2020/02/12/美赛/","content":"国赛讲究实力，美赛讲究创新。   \n\n//本文是为了数学建模美赛做赛前准备\n\n<!--more-->\n\n时间：北京时间3月6日上午6时至3月10日上午9时\n流程：\n1. 3月6日上午6时前往官网查看题目(http://www.comap.com/undergraduate/contests/mcm)\n2. 3月10日上午9时前提交论文\n(1)提交论文电子版：\n每队必须提交一份论文电子版，邮箱地址：\t\t\t\tsolutions@comap.com。同时提交指导教师一份。截止日期：北京时间2020年3月10日上午9:00。提交的论文不允许有任何增加或修改，否则将被认为违规而取消比赛资格。不允许重复发送，发送之前建议由指导教师定稿。（由于临近比赛结束时网络拥堵，发送邮件可能有延迟，建议7点前完成发送）\n\n(2)邮件主题为COMAP+队号。例如：COMAP2020449\n\n(3)用队号作为邮件附件的名称。\n\t\n(4)组委会只接受PDF或WORD文件（建议采用ＰＤＦ格式，公式不容易乱）。不包括控制页，程序或软件，因为不会被用在评审过程中（程序代码不是必须的，只要论文就行）。学生、老师或学校名称不应出现在论文的任何部分。摘要页（Summary Sheet）应为论文的第一页。注意：附件必须小于17MB。禁止使用云服务。\n\n(5)发送论文后，再次登录美赛官网，点击Submit Final Solution Paper。\n\n\n根据时间顺序分为以下几个部分：\n1. 赛前学习\n\t(1) 文献和数据网站\n\t\t[Google Scholar](https://scholar.google.com/)(需要梯子)\n\t\t[阿里开发数据库](https://tianchi.aliyun.com/dataset/?spm=5176.12281905.0.0.358b5699IjonJQ)\n\t\t[cnki](https://www.cnki.net/)\n\t\t[nasa](https://sedac.ciesin.columbia.edu/)\n\t\t[science](https://science.sciencemag.org/)\n\t\t[deepdyve](https://www.deepdyve.com/)\n\t(2)软件\n\t\t编程工具：MATLAB\n\t\t统计建模：SPSS\n\t\t写作：LaTex/word\n\t\t// TODO\n\t\t流程图制作：ppt、visio、亿图\n\t\t插图制作：PS\n\t\t团队协作：线上交流+语音+在线文档\n\t\n\t(3)数学建模\t// TODO\n\t\t模型储备\n\t(4)题型分析及选择(由于我们只可能在3月参加，故只分析三道)\n\t\n\t```\n\tMCM Problem B\n\t\n\tMCM Problem C\n\t\t\n\tICM Problem F（推荐且论文页数不超过20）\n\t```\n\t\n\t(5)论文规范及书写安排 // TODO\n\t\n2. 模拟比赛\n     // TODO\n\n3. 赛前准备\n       (1) 物资准备：包括但不限于 软件准备 比赛通信 资料网站准备 邮件准备\n       (2) 分工：模拟比赛后划分\n       (3) 时间安排: 模拟比赛后安排\n\n\n\n附录：\n\n2017年国赛B题分析：\n\n以下分析基于一等奖的两篇优秀论文。\n\n总述：选择这一题的主要原因是因为这道题较为简单，而且年份较近具有一定的代表性。另外就是中文好理解。\n\n以下分析只包含个人感受和一定的主观思考。\n\n优秀论文1：数学建模能力极强。其他方面的能力并不算突出，编程水平较弱。\n\n优秀论文2：技术水平整体高。包括建模、编程水平还有写作水平。写作格式值得借鉴。\n\n两篇优秀论文的共通点是数学建模能力都很强，而且均体现了各自对题目的思考，并成功的将思考转化为数学模型。（论文1在问题2处引入了吸引力因子，论文2标黑的都是自己引入的参数或者重点）两篇文章的正文部分均在20页左右（17,23）。我们写作时需要注意美赛题目对页数的要求。\n\n这里额外说一下关于数学模型的使用。在论文1讨论问题4时，明确提出套用了定价模型的两个公式。问题2仿照库伦定律进行了量化，问题3使用了K-means聚类算法。论文2使用ISODATA算法分析问题1，问题2使用位势函数法。较为专业的地方两篇论文都参考或者使用或参考了成熟的数学模型。\n\n简单提一下我个人认为的要点：\n\n1. 分析问题和初步的解决思路(这里需要大量的建模知识和信息获取能力)\n\n2. 细化思路并探索可行性（难点突破和时间权衡）\n\n3. 建立数学模型（论文和成熟模型的查找及化用）\n4. 编程和写作（协同方案）","tags":["技术探究"],"categories":["技术"]},{"title":"当我谈跑步时，我在谈些什么","url":"/2019/12/22/run/","content":"![run](/img/run.jpg)\n<!--more-->\n这个学期我跑了很多次步。有记录的超过2.5公里的就有34次。\n所以虽然我在长胖，可我还是感觉我的身体更加“轻盈”了哈哈哈。\n可以说这是我人生中第一次长时间的坚持跑步  //大概算长时间吧。\n而且打算坚持一下。于是想找一个方法坚持下去。\n\n我很早就知道村上春树这个人，大概是在初中。我高中很喜欢日本文学，\n在学校图书馆借了很多日本的书看，其中最多的就是村上先生的书。我喜\n欢他的那种看似有些冷淡却始终热爱生活的文字。于是这次我还是选择去\n看看他的书《当我谈跑步时，我在谈些什么》。\n\n当我在跑步时，我在听歌。我不停的听歌。音乐给我力量。甚至在最后的\n冲刺时，我会切到一首激昂的歌才开始用尽全力向前跑。这真是非常畅快\n的体验。\n\n","tags":["随笔"],"categories":["随笔"]},{"title":"小偷家族","url":"/2019/12/07/thief/","content":"![小偷家族](/img/thief.jpg)\n<!--more-->\n世界上真的只有一种病 是穷病吗？\n不是的。\n这个世界还有一种病叫 缺爱。\n真是一部很压抑又很温暖的电影。\n看完了\n不知道为什么想到了东野的嫌疑人x的献身，石神几欲呕出灵魂。而在小偷家族中，一切归于平静。\n所有的一切都被社会和时间慢慢的抹去。\n当这一种色彩渐渐消失之后，\n这六个毫无血缘关系的人，\n他们的心还在一切。\n因为什么？\n或许就像影片中的父亲说的那样。\n是爱将这个家族联系在一起。\n\n小偷家族\n他们中很多人世第三只手，\n他们全都有两颗心。\n一个留给自己\n一个分享给别人。\n他们在路上拾起别人丢弃的心。\n\n到底是什么导致了这样的家族出现呢？\n很多很多原因，\n很多我现在根本不能完全理解和领会的东西。\n不过这个家族在被发现后，\n至少社会给了他们最低的保障。\n我们能保证我们的社会有那个兜底的网吗？\n让失足的人不会就此沉沦，\n让沉沦的人不会跌下深渊。\n我们有这种爱吗？\n这种爱又是什么爱呢？\n不知道。\n我真的搞得懂这部电影在说什么吗？\n不知道。\n不知道多少年后我会重新再回来看一遍他。\n希望那时我能回答几个知道。\n\n","tags":["随笔"],"categories":["随笔"]},{"title":"Git和GitHub入门","url":"/2019/12/03/Git和GitHub入门指南/","content":"\n*经过jl大佬和hy大佬的指导后重新编写*\n\n> 放GitHublogo章鱼猫的图片来作为引入\n\n*what*\n### Git和GitHub是什么\n\n**Git** (/ɡɪt/) is a distributed version-control system for tracking changes in source code during software development.  --wikipedia\n**GIT**是一个分布式版本控制系统用于跟踪的变化系统的源代码中的软件开发。--维基百科\n\n**GitHub** is an American company that provides hosting for software development. Github includes version control using Git, which allows software projects to keep track of all versions and revert to previous versions if necessary.  --wikipedia\n**GitHub**是一家美国公司，为软件开发提供托管。GitHub包含使用Git进行的版本控制，该版本控制允许软件项目跟踪所有版本，并在必要时还原为以前的版本。--维基百科\n\n**用人话说Git是啥**\nGit是一种分布式版本控制系统。但它的核心其实是数据库。Git把我们的每一次提交记录到数据库中。我们可以通过对数据库进行查询来了解并回溯每一次提交，这就实现了版本控制。然后我们可以选择将这个数据库完整的克隆到另一台服务器上，这就实现了分布式。\n\n<!--more-->\n\n### Git的工作流程\n\nGit将我们的每一次提交放到工作目录的缓存空间，完成保存。然后等你想提交到远程仓库的时候再从缓存区里提交出去。同样的，你也可以从远程仓库将文件下载回工作目录。\n\n![git-workflow1](/img/git-workflow1.png)\n\n### 啥是分布式版本控制系统(Distributed Version Control)\n\n说到分布式版本控制系统就不得不提到集中式版本控制系统，他们最大的差别在于分布式的仓库可以有很多份。其实这是一个去中心化的概念。在集中式版本控制系统中，拥有唯一的中心也就是我们常说的服务器。中央服务器是一切的核心，储存着所有的数据。而分布式版本控制则是一个去中心，或者说是多中心的系统。每一个开发者的本地仓库都拥有着全部的数据。 \"push\" \"pull\" 操作则是为了让所有的仓库数据统一而已。\n\n\n![distributed system](/img/distributed.png)\n\n### Git VS SVN\n\n|  \t\t| 集中式（SVN）| 分布式（Git）|\n|:----|:---:|:---:|\n|有无中央服务器|有。开发者脱离服务器几乎无法工作|无。开发者有本地仓库|\n|分支操作|创建分支则所有人都有此分支|分支操作不影响其他人|\n|提交|直接提交到中央版本库|首先提交到本地缓存区，执行push操作才提交到版本库|\n|图释|<img src=\"/img/svn.jpg\" width=\"50%\"/>|<img src=\"/img/git.jpg\" width=\"50%\"/>|\n\n*what*\n> // 有一说一git/github的功能详细并没有做,还是沿用了原来的简易版本\n\n### 我们用Git和GitHub来干什么\n\n+ 代码托管\t//不解释\n+ 项目管理\t//如，版本控制、协作编程\n+ 资源备份\t//如，托管编程环境、备份核心代码\n+ 托管静态网页\t//如，GitHub Page\n+ 个人简历\t//你可以在GitHub上展示你自己\n+ 查找资料\t//GitHub可能是全世界程序方面资料最多的地方\n+ 交朋友\t//全球最大的同性交友平台\n+ 资讯来源\t//GitHub热榜！比知乎更有料，比微博更劲爆\n\n*how*\n\n### Git的安装和使用\n\n#### [安装](https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git)\n\n[点击此处进入官方安装教程](https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git)\n\n#### 使用\n让我们先新建一个仓库（文件夹），进入文件夹并打开Git Bash。\n执行\n```\n$ git init\n```\n接下来你可以执行如下命令以创建一个本地仓库的克隆版本：\n```\n$ git clone /path/to/repository\n```\n如果是远端服务器上的仓库，你的命令会是这个样子：\n```\n$ git clone username@host:/path/to/repository\n```\n搭建好仓库后，如果你有所改动可以把它添加到缓存区，使用如下命令：\n```\n$ git add <filename>\n$ git add *\t\t//将所有的改动都添加\n```\n最后使用如下命令以实际提交改动：\n```\n$ git commit -m \"代码提交信息\"\n```\n现在，你的改动已经提交到了 HEAD，但是还没到你的远端仓库。\n执行如下命令以将这些改动提交到远端仓库：\n```\n$ git push origin master\t//可以把 master 换成你想要推送的任何分支。\n```\n\n**注意事项**\n\n+ git commit 命令一定要添加描述，否则会无法成功运行\n\n\n*本段参考自[https://www.bootcss.com/p/git-guide](https://www.bootcss.com/p/git-guide/)/*\n*想要深入了解GIt的同学可以前去参考*\n\n\n> // Git命令太多，基本命令已经在上文展示故取消Git命令大全板块\n> // 使用git中常见的问题和注意事项过于杂乱，故只提一点\n","tags":["技术探究"],"categories":["技术"]},{"title":"docker","url":"/2019/11/26/docker/","content":"\n***开一个新坑***\n\n// 学完没啥整理的欲望。。。还是太浅了\n\n","tags":["技术探究"],"categories":["技术"]},{"title":"Start！","url":"/2019/11/25/Start/","content":"\n总之还是决定开始写博客。 // 虽然还是偷懒用了GitHub Page\n\n本博客已经迁移，在完成搭建前不定时更新。\n\n联系请通过邮件。\n\n\n\n","tags":["瞎写"],"categories":["随笔"]},{"title":"Hello world","url":"/2019/11/25/Hello world/","content":"\n博客的大致框架：\n\tcategoies: 技术 随笔\n\ttags: [技术探究] [解决方案] [思考] [随笔]\n\n<!--more-->\n\n这里啥也没有。","tags":["随笔"],"categories":["随笔"]}]