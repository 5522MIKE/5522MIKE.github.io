<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MikyMing&#39;s Blog</title>
  
  <subtitle>隐约雷鸣，阴霾天空</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mikyming.online/"/>
  <updated>2020-12-26T11:56:14.751Z</updated>
  <id>https://mikyming.online/</id>
  
  <author>
    <name>MikyMing</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法入门</title>
    <link href="https://mikyming.online/2020/12/26/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"/>
    <id>https://mikyming.online/2020/12/26/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/</id>
    <published>2020-12-26T11:55:45.000Z</published>
    <updated>2020-12-26T11:56:14.751Z</updated>
    
    <content type="html"><![CDATA[<p>同样是为了期末考，可恶。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;同样是为了期末考，可恶。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://mikyming.online/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术探究" scheme="https://mikyming.online/tags/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>操作系统重点知识整理</title>
    <link href="https://mikyming.online/2020/12/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
    <id>https://mikyming.online/2020/12/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</id>
    <published>2020-12-26T06:33:15.000Z</published>
    <updated>2021-01-02T09:49:30.034Z</updated>
    
    <content type="html"><![CDATA[<p>万恶的期末考试要来了，这里做一个简单的操作系统重点知识整理。核心的部分会放在进程，处理机调度和死锁以及处理器那一块。可能会很乱哈哈哈哈哈哈。</p><a id="more"></a>        <h2 id="第一章-操作系统引论"   >          <a href="#第一章-操作系统引论" class="heading-link"><i class="fas fa-link"></i></a>第一章 操作系统引论</h2>              <h2 id="第二章-进程的描述与控制"   >          <a href="#第二章-进程的描述与控制" class="heading-link"><i class="fas fa-link"></i></a>第二章 进程的描述与控制</h2>      <ol><li>练习题，P91，T2</li><li>为什么程序并发执行会产生间断性特征？</li><li>在操作系统中为什么要引入进程概念？它会产生什么样的影响?</li></ol><p>为了使程序在多道程序环境下能并发执行，并对并发执行的程序加以控制和描述，在操作系统中引入了进程概念</p><ol start="4"><li>试从动态性，并发性和独立性上比较进程和程序?</li></ol><p>(1)动态性是进程最基本的特性，表现为由创建而产生，由调度而执行，因得不到资源而暂停执行，由撤销而消亡。进程有一定的生命期，而程序只是一组有序的指令集合，是静态实体。<br>(2)并发性是进程的重要特征，同时也是OS 的重要特征。引入进程的目的正是为了使其程序能和其它进程的程序并发执行，而程序是不能并发执行的。<br>(3)独立性是指进程实体是一个能独立运行的基本单位，也是系统中独立获得资源和独立调度的基本单位。对于未建立任何进程的程序，不能作为独立单位参加运行。</p><ol start="5"><li>试说明PCB 的作用，为什么说PCB 是进程存在的惟一标志？</li></ol><p>PCB 是进程实体的一部分，是操作系统中最重要的记录型<strong>数据结构</strong>。作用是使一个在多道程序环境下不能独立运行的程序，成为一个能独立运行的基本单位，成为能与其它进程并发执行的进程。OS是根据PCB对并发执行的进程进行控制和管理的。</p><ol start="6"><li>PCB提供了进程管理和进程调度所需要的那些信息？</li><li>进程控制块的组织方式有哪几种？</li><li>何谓操作系统内核？内核的主要功能是什么？</li><li>试说明进程在三个基本状态之间转换的典型原因。</li></ol><p>（1）就绪状态→执行状态：进程分配到CPU资源<br>（2）执行状态→就绪状态：时间片用完<br>（3）执行状态→阻塞状态：I/O请求<br>（4）阻塞状态→就绪状态：I/O完成</p><ol start="10"><li>试从调度性、并发性、拥有资源及系统开销方面对进程和线程进行比较。</li><li>线程控制块TCB包含了哪些内容？</li></ol>        <h2 id="第三章-处理机调度和死锁"   >          <a href="#第三章-处理机调度和死锁" class="heading-link"><i class="fas fa-link"></i></a>第三章 处理机调度和死锁</h2>      <ol><li>高级调度与低级调度的主要任务是什么？为什么要引入中级调度？</li></ol><p>高级调度的主要任务是根据某种算法，把外存上处于后备队列中的那些作业调入内存。<br>低级调度是保存处理机的现场信息，按某种算法先取进程，再把处理器分配给进程。<br>引入中级调度的主要目的是为了提高内存利用率和系统吞吐量。<br>使那些暂时不能运行的进程不再占用内存资源，将它们调至外存等待，把进程状态改为就绪驻外存状态或挂起状态。</p><ol start="2"><li>处理机调度算法的共同目标是什么？批处理系统的调度目标又是什么？</li><li>在抢占调度方式中，抢占的原则是什么？</li></ol><p>抢占的原则有：时间片原则、优先权原则、短作业优先权原则等。</p><ol start="4"><li>在选择调度方式和调度算法时，应遵循的准则是什么？</li></ol><p>面向用户的准则：周转时间短、响应时间快、截止时间的保证、优先权准则。<br>面向系统的准则：系统吞吐量高、处理机利用率好、各类资源的平衡利用。</p><ol start="5"><li>何谓静态和动态优先级？确定静态优先级的依据是什么？</li></ol><p>静态优先级是指在创建进程时确定且在进程的整个运行期间保持不变的优先级。<br>动态优先级是指在创建进程时赋予的优先权， 可以随进程推进或随其等待时间增加而改变的优先级，可以获得更好的调度性能。 <br>确定进程优先级的依据：进程类型、进程对资源的需求和用户要求。</p><ol start="6"><li>试比较 FCFS 和 SPF 两种进程调度算法。</li></ol><p>相同点：两种调度算法都可以用于作业调度和进程调度。 <br>不同点： <br>FCFS  调度算法每次都从后备队列中选择一个或多个最先进入该队列的作业， 将它们调入内存、分配资源、创建进程、插入到就绪队列。该算法有利于长作业 /进程，不利于短作业 /进程。 <br>SPF 算法每次调度都从后备队列中选择一个或若干个估计运行时间最短的作 业，调入内存中运行。该算法有利于短作业 /进程，不利于长作业 /进程。</p><ol start="7"><li>在时间片轮转法中，应如何确定时间片的大小？</li></ol><p>时间片应略大于一次典型的交互需要的时间。 一般应考虑三个因素： 系统对相应时间的要求、就绪队列中进程的数目和系统的处理能力。</p><ol start="8"><li>为什么说传统的几种调度算法都不能算是公平调度算法？</li><li>保证调度算法是如何做到调度的公平性的？</li><li>按调度方式可将实时调度算法分为哪几种？</li><li>什么是最早截止时间优先调度算法？举例说明。</li></ol><p>根据任务的开始截止时间确定的任务优先级调度算法。 截止时间越早则优先级越高。 该算法要求在系统中保持一个实时任务就绪队列，该队列按各任务截止时间的先后排序。 举例：非抢占式调度方式用于非周期实时任务。</p><ol start="12"><li>什么是最低松弛度优先调度算法？举例说明之</li></ol><p>该算法是根据任务紧急 ( 或松弛 )的程度，来确定任务的优先级。任务的紧急程度愈高， 为该任务所赋予的优先级就愈高，以使之优先执行。例如，一个任务在   200 ms 时必须完成，而它本身所需的运行时间就有 100 ms ，因此，调度程序必须在 100 ms 之前调度执行，该任务的紧急程度 (松弛程度 )为 100 ms 。又如，另一任务在 400 ms 时必须完成，它本身需要运行 150 ms ，则其松弛程度为 250 ms 。</p><ol start="13"><li>何谓“优先级倒置”现象，可采用什么方法来解决？</li><li>试举例说明竞争不可抢占资源所引起的死锁</li><li>为了破坏“请求和保持”条件而提出了两种协议，试比较这两种协议</li><li>何谓死锁？产生死锁的原因和必要条件是什么?</li><li>请详细说明可通过哪些途径预防死锁。</li><li>练习题，P128</li><li>练习题，P128</li></ol>        <h2 id="第四章-存储器管理"   >          <a href="#第四章-存储器管理" class="heading-link"><i class="fas fa-link"></i></a>第四章 存储器管理</h2>      <ol><li>为什么要配置层次式存储器？</li></ol><p>设置多个存储器可以使存储器两端的硬件能并行工作；采用多级存储系统，特别是 Cache 技术，是减轻存储器带宽对系统性能影响的最佳结构方案；在微处理机内部设置各 种缓冲存储器，减轻对存储器存取的压力。增加CPU中寄存器数量大大缓解对存储器压力。</p><ol start="2"><li>何谓静态链接？何谓装入时动态链接和运行时的动态链接？P120</li></ol><p>静态链接是指在程序运行前，先将各目标模块及它们所需的库函数，链接成一个完整的装配模块，以后不再拆开的链接方式。 <br>装入时动态链接是指将用户源程序编译后得到的一组目标模块，在装入内存时采用边装入边链接的链接方式。 <br>运行时动态链接是指对某些目标模块的链接，是在程序执行中需要该目标模块时，才对它进行的链接。</p><ol start="3"><li>何谓装入时动态链接？有何优点？</li><li>何谓运行时动态链接？有何优点？</li><li>为什么要引入动态重定位？如何实现？ </li></ol><p>在程序执行过程中，每当访问指令或数据时，将要访问的程序或数据的逻辑地址转换成 物理地址，引入了动态重定位； 具体实现方法是在系统中增加一个重定位寄存器，用来装入程序在内存中的起始地址， 程序执行时，真正访问的内存地址是相对地址与重定位寄存器中的地址相加之和，从而实现 动态重定位</p><ol start="6"><li>在采用首次适应算法回收内存时，可能出现哪几种情况？应怎样处理这些情况？ </li></ol><p>在采用首次适应算法回收内存时可能出现4种情况： （1）回收区前邻空闲区。将回收区与前邻空闲区合并，将前邻空闲区大小修改为两者之和。 <br>（2）回收区后邻空闲区。将两区合并，改后邻空闲区始址为回收区始址，大小为两者之和。 <br>（3）回收区前后均邻空闲区。将三个分区合并，修改前邻空闲区大小为三者之和。 <br>（4）回收区前后均不邻空闲区。为回收区设置空闲区表项，填入回收区始址和大小并插入 空闲区队列。</p><ol start="7"><li>什么是基于索引搜索的动态分区匹配算法？它可分为哪几种？</li><li>练习题，P162，T11</li><li>对文件区管理的目标和对对换空间管理的目标有何不同？</li><li>在以进程为单位进行对换时，每次是否都将整个进程换出？为什么？</li></ol><p>在以进程为单位进行对换时，并非每次都将整个进程换出。这是因为： <br>(1)从结构上讲，进程由程序段、数据段和进程控制块组成的，其中进程控制块总有部分或全部常驻内存，不被换出。 <br>(2)程序段和数据段可能正被若干进程共享，此时它们也不能换出</p><ol start="11"><li>什么是页面？什么是物理块？页面的大小应如何确定？</li><li>为实现分页存储管理，需要哪些硬件的支持？ </li></ol><p>动态重定位技术、虚拟存储技术、多道程序设计技术</p><ol start="13"><li>在具有快表的段页式存储管理方式中，如何实现地址变换？</li></ol><p>在CPU给出有效地址后，由地址变换机构自动将页号P送入高速缓冲寄存器，并将此 页号与高速缓存中的所有页号比较，若找到匹配页号，表示要访问的页表项在快表中。可直 接从快表读出该页对应物理块号，送到物理地址寄存器中。如快表中没有对应页表项，则再 访问内存页表，找到后，把从页表项中读出物理块号送地址寄存器；同时修改快表，将此页 表项存入快表。但若寄存器已满，则OS必须找到合适的页表项换出。</p><ol start="14"><li>分页和分段存储管理有何去呗？</li><li>试全面比较连续分配和离散分配方式。</li></ol>        <h2 id="第五章-虚拟存储器"   >          <a href="#第五章-虚拟存储器" class="heading-link"><i class="fas fa-link"></i></a>第五章 虚拟存储器</h2>      <ol><li>常规存储器管理方式具有哪两大特征？它对系统性能有何影响？</li><li>什么是程序运行时的时间局限性和空间局限性？</li><li>实现虚拟存储器需要哪些硬件支持？</li></ol><p>（1）请求分页（段）的页（段）表机制（2）缺页（段）中断机构（3）地址变换机构</p><ol start="4"><li>在请求分页系统中，页表应包括哪些数据项？每项的作用是什么？ </li></ol><p>页表应包括：页号、物理块号、状态位P、访问字段A、修改位M和外存地址。 其中状态位P 指示该页是否调入内存，供程序访问时参考；访问字段A 用于记录本页在一 段时间内被访问的次数，或最近已有多长时间未被访问，提供给置换算法选择换出页面时参 考；修改位M 表示该页在调入内存后是否被修改过；外存地址用于指出该页在外存上的地 址，通常是物理块号，供调入该页时使用。</p><ol start="5"><li>试比较缺页终端机构与一般中断机构，他们之前有何明显的区别？</li><li>试说明请求分页系统中的地址变换功过程。</li><li>在请求分页系统中，应从何处将所需页面调入内存？ </li></ol><p>请求分页系统中的缺页从何处调入内存分三种情况： （1）系统拥有足够对换区空间时，可以全部从对换区调入所需页面，提高调页速度。在进程运行前将与该进程有关的文件从文件区拷贝到对换区。 <br>（2）系统缺少足够对换区空间时，不被修改的文件直接从文件区调入；当换出这些页面时，未被修改的不必换出，再调入时，仍从文件区直接调入。对于可能修改的，在换出时便调到对换区，以后需要时再从对换区调入。<br>（3）UNIX 方式。未运行页面从文件区调入。曾经运行过但被换出页面，下次从对换区调入。UNIX系统允许页面共享，某进程请求的页面有可能已调入内存，直接使用不再调入。</p><ol start="8"><li><strong>在请求分页系统中，常采用哪几种页面置换算法？</strong></li></ol><p>采用的页面置换算法有：最佳置换算法和先进先出置换算法，最近最久未使用（LRU）置换算法，Clock置换算法，最少使用置换算法，页面缓冲算法等</p><ol start="9"><li>实现LRU算法所需的硬件支持是什么?</li></ol><p>需要寄存器和栈等硬件支持。寄存器用于记录某进程在内存中各页的使用情况，栈用于 保存当前使用的各个页面的页面号。</p><ol start="10"><li>试说明改进型 Clock 置换算法的基本原理. </li></ol><p>因为修改过的页面在换出时付出的开销比未被修改过的页面大，在改进型Clock 算法 中，既考虑页面的使用情况，还要增加置换代价的因素；在选择页面作为淘汰页面时，把同 时满足未使用过和未被修改作为首选淘汰页面。 </p><ol start="11"><li>影响页面换进换出频率的若干因素是什么？</li><li>页面缓冲算法的主要特点是什么？它是如何实现的</li><li>在请求分页系统汇总，产生“抖动”的原因是什么？</li><li>何谓工作集？它是基于什么原理确定的？</li><li>当前可以利用哪几种方式来防止“抖动”？</li></ol>        <h2 id="第六章-输入输出系统"   >          <a href="#第六章-输入输出系统" class="heading-link"><i class="fas fa-link"></i></a>第六章 输入输出系统</h2>              <h2 id="第七章-文件管理"   >          <a href="#第七章-文件管理" class="heading-link"><i class="fas fa-link"></i></a>第七章 文件管理</h2>              <h2 id="第八章-磁盘存储器的管理"   >          <a href="#第八章-磁盘存储器的管理" class="heading-link"><i class="fas fa-link"></i></a>第八章 磁盘存储器的管理</h2>              <h2 id="第九章-操作系统接口"   >          <a href="#第九章-操作系统接口" class="heading-link"><i class="fas fa-link"></i></a>第九章 操作系统接口</h2>      ]]></content>
    
    <summary type="html">
    
      &lt;p&gt;万恶的期末考试要来了，这里做一个简单的操作系统重点知识整理。核心的部分会放在进程，处理机调度和死锁以及处理器那一块。可能会很乱哈哈哈哈哈哈。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://mikyming.online/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术探究" scheme="https://mikyming.online/tags/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>回形针与10个批评者聊天</title>
    <link href="https://mikyming.online/2020/10/07/%E5%9B%9E%E5%BD%A2%E9%92%88%E4%B8%8E10%E4%B8%AA%E6%89%B9%E8%AF%84%E8%80%85%E8%81%8A%E5%A4%A9/"/>
    <id>https://mikyming.online/2020/10/07/%E5%9B%9E%E5%BD%A2%E9%92%88%E4%B8%8E10%E4%B8%AA%E6%89%B9%E8%AF%84%E8%80%85%E8%81%8A%E5%A4%A9/</id>
    <published>2020-10-07T08:47:28.000Z</published>
    <updated>2020-10-07T11:02:07.539Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>知乎的朋友们好，我是回形针（可能你们都叫两面针）的吴松磊。<br>  11 天前，我们发布了最近半年的工作汇报，视频结尾发起了一个活动招募，邀请各位批评回形针的观众朋友和我一块视频聊天。<br> 「我们大概会选出 10 个人，你们可以当面直接喷我，聊点让我尴尬的东西。」</p></blockquote><p>我从回形针第100期开始看回形针，那一期是一个十分精彩的闯关类小游戏的预告。正好在我做完软协1024活动之后，我痴迷于这种游戏。紧接着我补完了回形针的所有视频，我喜欢这种理性的表达方式和一种所谓的了解了知识的快乐。我一度想成为回形针手册的编纂志愿者。突然有一天，“肉蛋奶”，“地图和标题内外网不一致”出现在我的时间线上。这一场互联网狂欢开始。作为全程的旁观者，我认为<span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/video/BV11i4y177nd"  target="_blank" rel="noopener">《【回形针PaperClip】和 10 个批评者一块聊天》</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>这个视频应该标志着这场闹剧暂时性的落幕了。这到底是一个“屁股”的问题，还是一个“网暴”的问题。我现在也看不真切。但是看完2个多小时的聊天全记录后，得以一窥操控键盘的人。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;知乎的朋友们好，我是回形针（可能你们都叫两面针）的吴松磊。&lt;br&gt;  11 天前，我们发布了最近半年的工作汇报，视频结尾发起了一个活动招募，邀请各位批评回形针的观众朋友和我一块视频聊天。&lt;br&gt; 「我们大概会选出 10 个人，你们可以当面直接喷我，聊点让我尴尬的东西。」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我从回形针第100期开始看回形针，那一期是一个十分精彩的闯关类小游戏的预告。正好在我做完软协1024活动之后，我痴迷于这种游戏。紧接着我补完了回形针的所有视频，我喜欢这种理性的表达方式和一种所谓的了解了知识的快乐。我一度想成为回形针手册的编纂志愿者。突然有一天，“肉蛋奶”，“地图和标题内外网不一致”出现在我的时间线上。这一场互联网狂欢开始。作为全程的旁观者，我认为&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://www.bilibili.com/video/BV11i4y177nd&quot;  target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《【回形针PaperClip】和 10 个批评者一块聊天》&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;这个视频应该标志着这场闹剧暂时性的落幕了。这到底是一个“屁股”的问题，还是一个“网暴”的问题。我现在也看不真切。但是看完2个多小时的聊天全记录后，得以一窥操控键盘的人。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://mikyming.online/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://mikyming.online/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="思考" scheme="https://mikyming.online/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>Vue</title>
    <link href="https://mikyming.online/2020/09/20/vue/"/>
    <id>https://mikyming.online/2020/09/20/vue/</id>
    <published>2020-09-20T09:48:52.000Z</published>
    <updated>2020-09-20T10:09:17.420Z</updated>
    
    <content type="html"><![CDATA[<p>tags: [] [解决方案] [思考] [随笔]</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;tags: [] [解决方案] [思考] [随笔]&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://mikyming.online/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术探究" scheme="https://mikyming.online/tags/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>微信读书</title>
    <link href="https://mikyming.online/2020/06/01/%E5%BE%AE%E4%BF%A1%E8%AF%BB%E4%B9%A6/"/>
    <id>https://mikyming.online/2020/06/01/%E5%BE%AE%E4%BF%A1%E8%AF%BB%E4%B9%A6/</id>
    <published>2020-06-01T12:14:39.000Z</published>
    <updated>2020-06-09T15:52:01.715Z</updated>
    
    <content type="html"><![CDATA[<p>微信读书已经推出有一定的时间了。以往在学校，小说自然有看小说的网站，读书自然就去学校图书馆。微信读书成为了可有可无的东西。但是随着疫情的到来，坐在家中，书籍的获得变的前所未有的困难起来。回想起去年送出的kindle，竟有些后悔。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微信读书已经推出有一定的时间了。以往在学校，小说自然有看小说的网站，读书自然就去学校图书馆。微信读书成为了可有可无的东西。但是随着疫情的到来，坐在家中，书籍的获得变的前所未有的困难起来。回想起去年送出的kindle，竟有些后悔。&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书" scheme="https://mikyming.online/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="随笔" scheme="https://mikyming.online/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="思考" scheme="https://mikyming.online/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>计网-网络层</title>
    <link href="https://mikyming.online/2020/06/01/%E8%AE%A1%E7%BD%91-%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
    <id>https://mikyming.online/2020/06/01/%E8%AE%A1%E7%BD%91-%E7%BD%91%E7%BB%9C%E5%B1%82/</id>
    <published>2020-06-01T12:05:06.000Z</published>
    <updated>2020-06-02T06:39:54.843Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>网络层是<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/OSI参考模型"  target="_blank" rel="noopener">OSI参考模型</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>中的第三层，介于<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/传输层/4329536"  target="_blank" rel="noopener">传输层</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>和<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/数据链路层/4329290"  target="_blank" rel="noopener">数据链路层</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>之间，它在数据链路层提供的两个相邻端点之间的数据帧的传送功能上，进一步管理网络中的<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/数据通信/897073"  target="_blank" rel="noopener">数据通信</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，将数据设法从源端经过若干个中间<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/节点/865052"  target="_blank" rel="noopener">节点</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>传送到目的端，从而向运输层提供最基本的端到端的<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/数据传送/500685"  target="_blank" rel="noopener">数据传送</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>服务。主要内容有：虚电路分组交换和<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/数据报"  target="_blank" rel="noopener">数据报</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>分组交换、<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/路由选择/10824858"  target="_blank" rel="noopener">路由选择</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/算法/209025"  target="_blank" rel="noopener">算法</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>、阻塞控制方法、<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/X.25协议"  target="_blank" rel="noopener">X.25协议</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>、综合业务数据网（ISDN）、<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/异步传输模式/511955"  target="_blank" rel="noopener">异步传输模式</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>（ATM）及网际互连原理与实现。</p></blockquote><a id="more"></a><p>[TOC]</p>        <h2 id="网络层提供的两种服务"   >          <a href="#网络层提供的两种服务" class="heading-link"><i class="fas fa-link"></i></a>网络层提供的两种服务</h2>      <p>两种服务的共同特点：网络层向上只提供简单的、无连接的、尽最大努力交付的数据报服务，不保证可靠通信</p><ol><li>虚电路：保证可靠通信，必须建立连接</li><li>数据报：尽最大努力发送，不保证可靠通信</li></ol>        <h2 id="网际协议IP"   >          <a href="#网际协议IP" class="heading-link"><i class="fas fa-link"></i></a>网际协议IP</h2>      <p>与IP配套使用的三个协议： </p><ol><li>地址解析协议ARP</li><li>网际控制报文协议ICMP</li><li>网际组管理协议IGMP</li></ol>        <h3 id="虚拟互连网络"   >          <a href="#虚拟互连网络" class="heading-link"><i class="fas fa-link"></i></a>虚拟互连网络</h3>      <p>虚拟互联网络：逻辑互连的网络，可以由多种异构网络互连组成，在网络层上看起来像一个统一的网络</p><p>中间设备：用来将网络互相连接</p><ol><li>物理层的中间设备：转发器</li><li>数据链路层的中间设备：网桥</li><li>网络层的中间设备：路由器</li><li>网络层以上的中间设备：网关</li></ol>        <h3 id="分类的IP地址"   >          <a href="#分类的IP地址" class="heading-link"><i class="fas fa-link"></i></a>分类的IP地址</h3>      <p><em>A、B、C类地址都是单播地址 D类地址用于多播</em></p><p>将IP地址划分为若干个固定类，每一类地址都由网络号(net-id)和主机号(host-id)构成一个IP地址在整个互联网范围内是唯一的。</p><p>IP地址的编址方法：</p><ol><li>分类的IP地址：是最基本的编址方法</li><li>子网的划分：对最基本编址方法的改进</li><li>构成超网：比较新的无分类编址方法</li></ol><p><strong>IP地址的重要特点：</strong></p><ol><li>每一个IP地址都由网络号和主机号两部分组成，是一种分等级的地址结构</li><li>实际上IP地址是标志一个主机或(路由器)和一条链路的接口</li><li>用转发器或网桥连接起来的若干给局域网仍为一个网络，因为这些局域网都具有同样的网络号net-id</li><li>所有分配到网络号的网络都是平等的</li></ol><p><strong>网络上的IP地址：</strong></p><ol><li>同一局域网上的各IP地址的网络号都是相同的</li><li>用网桥互连的网段仍是一个局域网，只有一个网络号</li><li>一个路由器有多个接口，每个接口对应的网络号不同</li><li>两路由器直接相连时，可以不给两端接口分配IP，这样的特殊网络也叫无编号网络或无名网络</li></ol>        <h3 id="IP地址与硬件地址"   >          <a href="#IP地址与硬件地址" class="heading-link"><i class="fas fa-link"></i></a>IP地址与硬件地址</h3>      <p>IP地址与硬件地址区别：从层次看，硬件地址或物理地址是数据链路层和物理层使用的地址，IP地址是网络层和以上各层使用的地址，是一种逻辑地址</p><p><img loading="lazy" src="https://raw.githubusercontent.com/5522MIKE/PicGo/master/md/20200602141739.jpg" alt="IP地址与硬件地址"></p>        <h3 id="地址解析协议ARP"   >          <a href="#地址解析协议ARP" class="heading-link"><i class="fas fa-link"></i></a>地址解析协议ARP</h3>      <p>IP地址与MAC地址：源IP地址和目的IP地址始终不变；而源MAC地址和目的MAC地址在每条链路上都要变化            </p><p>作用：从网络层使用的IP地址，解析出在数据链路层使用的硬件地址</p><p>工作方式：每个主机里都设有一个ARP高速缓存，里面有所在局域网上各主机和路由器的IP地址到硬件地址的映射表，且这个映射表经常动态更新</p><p>生存时间：ARP高速缓存中每条映射都只存在一段时间，超过时间后就被删除</p><p>*特点：</p><p>ARP协议只解决同一局域网上IP地址和硬件地址映射问题，不在同一局域网则无法解决<br>ARP工作过程对用户来说是透明的</p><p>四种使用ARP的典型情况：</p><ol><li>发送方是主机，要把IP数据报发送到本网络上的一个主机，这时ARP找到目的主机的硬件地址</li><li>发送方是主机，要把IP数据报发送到另一个网络上的一个主机，这时ARP找到本网络上的一个路由器的硬件地址，剩下的工作由这个路由器完成</li><li>发送方是路由器，要把IP数据报发送到本网络上的一个主机，这时ARP找到目的主机的硬</li><li>地址发送方是路由器，要把IP数据报发送到另一个网络上的主机，这时ARP找到本网络上的一个路由器的硬件地址，剩下的工作由这个路由器完成</li></ol>        <h3 id="IP数据报格式"   >          <a href="#IP数据报格式" class="heading-link"><i class="fas fa-link"></i></a>IP数据报格式</h3>      <p>略</p>        <h3 id="IP层转发分组的流程"   >          <a href="#IP层转发分组的流程" class="heading-link"><i class="fas fa-link"></i></a>IP层转发分组的流程</h3>      <p>略</p>        <h2 id="划分子网和构造超网"   >          <a href="#划分子网和构造超网" class="heading-link"><i class="fas fa-link"></i></a>划分子网和构造超网</h2>              <h3 id="划分子网"   >          <a href="#划分子网" class="heading-link"><i class="fas fa-link"></i></a>划分子网</h3>      <p>划分子网的理由：两级IP地址的问题：</p><ul><li>IP地址空间利用率有时很低  </li><li>给每个屋里网络分配一个网络号会使路由表变得很大，因此是网络性能变坏  </li><li>两级IP地址不够灵活</li></ul><p>划分子网的基本思路：借用主机号若干位作为子网地址</p><p>划分子网后的IP地址：| 网络号 | (子网) | 主机号 |</p><p>子网掩码：</p><p>  作用：用来找出IP地址中的子网部分，长度为32位，原IP中网络号和子网部分置为1，主机号部分置为0</p><p>  (IP地址)and(子网掩码)=网络地址</p><p>  默认子网掩码：在不进行子网划分时，也要给出子网掩码，就用默认子网掩码</p><p>子网掩码是一个网络或一个子网的重要属性，路由表中的每一项还要给出该网络的子网掩码</p><p>子网数：2^k-2，k表示子网号的位数，减去全0和全1，就是可用子网数，虽然现在全0和全1地址也可以使用，但不推荐</p><p>子网划分方法：</p><ol><li>固定长度划分：所划分的所有子网的子网掩码都是相同的，取所用最大的主机数进行划分</li><li>变长划分：根据需求灵活划分</li></ol>        <h3 id="使用子网时的分组转发："   >          <a href="#使用子网时的分组转发：" class="heading-link"><i class="fas fa-link"></i></a>使用子网时的分组转发：</h3>      <p>子网划分后的路由表：包含目的网络地址、子网掩码、下一跳地址</p><p>子网划分后的路由器转发分组算法：</p><p>略</p>        <h3 id="无分类编址CIDR-构造超网-："   >          <a href="#无分类编址CIDR-构造超网-：" class="heading-link"><i class="fas fa-link"></i></a>无分类编址CIDR(构造超网)：</h3>      <p>概述：它最最主要的一点是消除了A,B,C类地址和划分子网的概念.它重新将IP地址划分为两个部分即,”网络前缀”和”主机号”.注意这里的网络前缀再也没有位数的限制,即没有A,B,C类之分</p><p>CIDR的主要特点：</p><ol><li>消除了传统A、B、C类地址及划分子网的概念，重新将IP地址划分为两个部分即,”网络前缀”和”主机号”.注意这里的网络前缀再也没有位数的限制,即没有A,B,C类之分</li><li>把网络前缀相同的连续IP地址组成一个CIDR地址块，只要知道任一个地址，就可以知道这个地址块的起始地址和最大地址以及地址数</li></ol><p>格式：使用网络前缀代替网络号和子网号，使IP地址变回两级格式</p><p>斜线表示法：/24表示子网掩码前24位为1，即网络前缀的位数</p><p>CIDR地址块：把网络前缀都相同的连续IP地址组成CIDR地址块</p><p>路由聚合：一个CIDR地址块能表示很多地址，这种地址的聚合称为路由聚合，也称为构成超网；有利于减少路由器之间的路由选择信息的交换，从而提高整个互联网的性</p><p>最长前缀匹配：</p><ul><li>用收到的目的地址与路由表中的每条掩码依次相与，取最长前缀匹配项的地址作为下一跳</li><li>因为前缀越长，其地址块就越小，因而路由就越具体</li></ul><p>二叉线索树：</p><p>将路由表中各IP地址构成一个01字典树，也称为二叉线索树，能极大优化路由表匹配过程</p>        <h2 id="网际控制报文协议ICMP"   >          <a href="#网际控制报文协议ICMP" class="heading-link"><i class="fas fa-link"></i></a>网际控制报文协议ICMP</h2>      <p>课堂问题：为什么ICMP要和IP一起发送？</p><p>A:需要转发</p><p>作用：ICMP允许主机或路由器报告差错和提供有关异常情况的报告</p>        <h3 id="报文种类："   >          <a href="#报文种类：" class="heading-link"><i class="fas fa-link"></i></a>报文种类：</h3>      <p>略</p>        <h3 id="ICMP的应用："   >          <a href="#ICMP的应用：" class="heading-link"><i class="fas fa-link"></i></a>ICMP的应用：</h3>      <ul><li><p>PING： PING即Packet InterNet Groper，用于探测两台主机间是否连通，源主机向目标主机发送ICMP的回送请求报文（封装在IP数据报中），目标主机若接收到该报文则返回回送回答报文</p></li><li><p>路由探测： 路由探测即源主机向目标主机发送无法交付的UDP数据报（封装于IP数据报，若目标主机接收到该数据报，则会返回ICMP终点不可达报文），第一次发送时将IP数据报的生存时间设为1，这样一来第一个路由器接收到后将生存时间-1就会直接判断该IP分组需要丢弃，并返回ICMP时间超过报文，源主机接下来发送第二个IP数据报（依然为不可交付UDP数据报），此次将生存时间设为2……以此类推，直至接收到ICMP终点不可达报文，或生存时间达到上限为止。</p></li></ul>        <h2 id="互联网的路由选择协议"   >          <a href="#互联网的路由选择协议" class="heading-link"><i class="fas fa-link"></i></a>互联网的路由选择协议</h2>              <h3 id="路由选择协议基本概念"   >          <a href="#路由选择协议基本概念" class="heading-link"><i class="fas fa-link"></i></a>路由选择协议基本概念</h3>      <p>分层次的路由选择协议：</p><p>互联网采用分层次的路由选择协议，自适应的(动态的)、分布式路由选择协议</p><p>*自治系统AS：</p><p>在单一技术管理下的一组路由器，在AS内部使用内部网关协议，AS之间使用外部网关协议</p><p>路由选择协议分类：</p><ol><li>内部网光协议IGP：在一个自治系统内部使用。如RIP、OSPF协议</li><li>外部网光协议EGP：在不同自治系统之间使用。如BGP协议</li></ol>        <h3 id="内部网关协议RIP"   >          <a href="#内部网关协议RIP" class="heading-link"><i class="fas fa-link"></i></a>内部网关协议RIP</h3>      <p>略</p>        <h3 id="OSPF协议"   >          <a href="#OSPF协议" class="heading-link"><i class="fas fa-link"></i></a>OSPF协议</h3>      <p>略</p>        <h3 id="外部网关协议EGP"   >          <a href="#外部网关协议EGP" class="heading-link"><i class="fas fa-link"></i></a>外部网关协议EGP</h3>      <p>略</p>        <h3 id="路由器的构成"   >          <a href="#路由器的构成" class="heading-link"><i class="fas fa-link"></i></a>路由器的构成</h3>      <p>略</p><p><em>补充内容：</em></p>        <h2 id="IPv6"   >          <a href="#IPv6" class="heading-link"><i class="fas fa-link"></i></a>IPv6</h2>      <p>主要变化：</p><ul><li>更大的地址空间：将地址从32位增大到128位</li><li>扩展的地址层次结构</li><li>灵活的首部格式：定义了很多可选的扩展首部</li><li>改进的选项：允许数据报包含有选项的控制信息，其选项放在有效载荷中</li><li>允许协议继续扩充</li><li>支持即插即用：自动配置，不需要使用DHCP</li><li>支持资源的预分配</li><li>首部改为8字节对齐</li></ul>        <h2 id="VPN-amp-NAT"   >          <a href="#VPN-amp-NAT" class="heading-link"><i class="fas fa-link"></i></a>VPN&amp;NAT</h2>              <h3 id="VPN"   >          <a href="#VPN" class="heading-link"><i class="fas fa-link"></i></a>VPN</h3>      <p>概述：用于机构内部的通信，而不是用于和网络外非本机构的主机通信，但没有真正使用通信专线，VPN只是在效果上和真正的专用网一样</p><p>VPN的构建：</p><p>所有通过互联网传送的数据都必须加密，要构建VPN必须为它的每一个场所配置专门的硬件和软件，使每一个场所的VPN系统都知道其他场所的地址</p>        <h3 id="网络地址转换NAT"   >          <a href="#网络地址转换NAT" class="heading-link"><i class="fas fa-link"></i></a>网络地址转换NAT</h3>      <p>要在路由器上安装NAT软件，装有NAT软件的路由器称为NAT路由器，它至少有一个有效的外部全球IP地址，所有使用本地地址的主机在和外界通信时，都要在NAT路由器上将其本地地址转换为全球IP地址，才能和互联网连接</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;网络层是&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://baike.baidu.com/item/OSI参考模型&quot;  target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OSI参考模型&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;中的第三层，介于&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://baike.baidu.com/item/传输层/4329536&quot;  target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;传输层&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;和&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://baike.baidu.com/item/数据链路层/4329290&quot;  target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;数据链路层&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;之间，它在数据链路层提供的两个相邻端点之间的数据帧的传送功能上，进一步管理网络中的&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://baike.baidu.com/item/数据通信/897073&quot;  target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;数据通信&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;，将数据设法从源端经过若干个中间&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://baike.baidu.com/item/节点/865052&quot;  target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;节点&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;传送到目的端，从而向运输层提供最基本的端到端的&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://baike.baidu.com/item/数据传送/500685&quot;  target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;数据传送&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;服务。主要内容有：虚电路分组交换和&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://baike.baidu.com/item/数据报&quot;  target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;数据报&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;分组交换、&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://baike.baidu.com/item/路由选择/10824858&quot;  target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;路由选择&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://baike.baidu.com/item/算法/209025&quot;  target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;算法&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;、阻塞控制方法、&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://baike.baidu.com/item/X.25协议&quot;  target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;X.25协议&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;、综合业务数据网（ISDN）、&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://baike.baidu.com/item/异步传输模式/511955&quot;  target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;异步传输模式&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;（ATM）及网际互连原理与实现。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://mikyming.online/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术探究" scheme="https://mikyming.online/tags/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>浅谈pathinfo</title>
    <link href="https://mikyming.online/2020/05/06/pathinfo/"/>
    <id>https://mikyming.online/2020/05/06/pathinfo/</id>
    <published>2020-05-06T11:07:38.000Z</published>
    <updated>2020-06-01T12:24:51.718Z</updated>
    
    <content type="html"><![CDATA[<p>在学习<code>thinkPHP</code>的过程中使用控制器进行跳转，结果会定向到<code>404</code>页面。URL是正确的，形如<code>http://localhost/index.php/index/index/flower/a/2/b/3</code>。起先我认为是我代码的问题，结果我发现别人的代码可以运行。我意识到有可能是我的服务器的问题或者和<code>Url Router</code>有关。这件事突然就变得有意思了起来，我决定系统的去思考一下问题在哪并解决它。</p><a id="more"></a>        <h3 id="先看看设计模式"   >          <a href="#先看看设计模式" class="heading-link"><i class="fas fa-link"></i></a>先看看设计模式</h3>      <p><code>thinkPHP</code>是很出名的<code>MVC</code>框架，<code>Model - View - Controller</code>的设计模式使得我所有的交互都首先得通过<code>Controller</code>，再由<code>Controller</code>去进行其它的交互。我检查了我那简单至极的<code>Controller</code>没有发现错误。和<code>Controller</code>相关联的<code>.php</code>文件也没有问题。然后我发现我们老师布置的作业框架并不是完全的<code>MVC</code>设计模式…这个暂且不谈。那么既然代码没有问题，就是环境配置的问题了。</p>        <h3 id="thinkPHP是如何通过Url-Router跳转的"   >          <a href="#thinkPHP是如何通过Url-Router跳转的" class="heading-link"><i class="fas fa-link"></i></a>thinkPHP是如何通过Url Router跳转的</h3>      <p>在<code>thinkPHP</code>进行常规<code>url</code>解析之前，先检测路由，如果发现有路由规则匹配当前的<code>pathinfo</code>，那么<code>URL</code>解析则交给路由处理。</p><p>路由规则是由多条 rule=&gt;router 规则组成的数组。</p><p>路由处理过程大概如下：</p><p>1.遍历路由规则，与当前<code>pathinfo</code>字符串进行匹配，如果合法，则从<code>pathinfo</code>中取出所需要的字符串。</p><p>2.路由中每条规则对应一个<code>router</code>，<code>router</code>中指定对应的模块以及方法，模块和方法可以用第1步中匹配到的字符串进行动态替代。</p><p>3.将剩余的参数都解析并写入到<code>$_GET</code>中。</p><p><code>pathinfo</code>模式：</p><figure class="highlight awk"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>域名<span class="regexp">/项目名/</span>入口文件<span class="regexp">/模块名/</span>方法名<span class="regexp">/键1/</span>值<span class="number">1</span><span class="regexp">/键2/</span>值<span class="number">2</span></span><br></pre></td></tr></table></div></figure><p>这也就是说，我如果想用<code>thinkPHP</code>进行<code>URL</code>跳转，那么我需要开启有关<code>pathinfo</code>的配置。结果经过查询，<code>apache</code>是默认开启<code>pathinfo</code>的，所以老师才得以直接使用而不需要相关配置。我陷入了误区，我以为我使用的是<code>apache</code>。结果实质上我将项目导入<code>PHPstorm</code>后，浏览项目时使用的是<code>PHP</code>直接提供的默认端口号为<code>63342</code>的内置服务器。真的是粗心犯错。。我把web 服务器换为<code>apache</code>后就可以运行了。</p>        <h3 id="后记"   >          <a href="#后记" class="heading-link"><i class="fas fa-link"></i></a>后记</h3>      <p>解决了问题后，为了更加深入的了解<code>URL</code>解析流程，去看了<a href="https://github.com/top-think/thinkphp/blob/master/ThinkPHP/Library/Think/Dispatcher.class.php" target="_blank" rel="noopener"><code>ThinkPHP/Lib/Core/Dispatcher.class.php</code></a>核心类。在这里贴一段：</p><figure class="highlight php"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分析PATHINFO信息</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>($_SERVER[<span class="string">'PATH_INFO'</span>])) &#123;</span><br><span class="line">            $types = explode(<span class="string">','</span>, C(<span class="string">'URL_PATHINFO_FETCH'</span>));</span><br><span class="line">            <span class="keyword">foreach</span> ($types <span class="keyword">as</span> $type) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">0</span> === strpos($type, <span class="string">':'</span>)) &#123;</span><br><span class="line">                    <span class="comment">// 支持函数判断</span></span><br><span class="line">                    $_SERVER[<span class="string">'PATH_INFO'</span>] = call_user_func(substr($type, <span class="number">1</span>));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (!<span class="keyword">empty</span>($_SERVER[$type])) &#123;</span><br><span class="line">                    $_SERVER[<span class="string">'PATH_INFO'</span>] = (<span class="number">0</span> === strpos($_SERVER[$type], $_SERVER[<span class="string">'SCRIPT_NAME'</span>])) ?</span><br><span class="line">                        substr($_SERVER[$type], strlen($_SERVER[<span class="string">'SCRIPT_NAME'</span>])) : $_SERVER[$type];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></div></figure><p>看完后两个感受：</p><ol><li>中午注释真舒服</li><li><code>PHP</code>果然没有好好学，很多语法都要现查</li></ol>        <h3 id="参考："   >          <a href="#参考：" class="heading-link"><i class="fas fa-link"></i></a>参考：</h3>      <p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/zstxt1989/article/details/9310121"  target="_blank" rel="noopener">ThinkPHP中URL解析原理，以及URL路由使用教程</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在学习&lt;code&gt;thinkPHP&lt;/code&gt;的过程中使用控制器进行跳转，结果会定向到&lt;code&gt;404&lt;/code&gt;页面。URL是正确的，形如&lt;code&gt;http://localhost/index.php/index/index/flower/a/2/b/3&lt;/code&gt;。起先我认为是我代码的问题，结果我发现别人的代码可以运行。我意识到有可能是我的服务器的问题或者和&lt;code&gt;Url Router&lt;/code&gt;有关。这件事突然就变得有意思了起来，我决定系统的去思考一下问题在哪并解决它。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://mikyming.online/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术探究" scheme="https://mikyming.online/tags/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%A9%B6/"/>
    
      <category term="思考" scheme="https://mikyming.online/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>读书和写作</title>
    <link href="https://mikyming.online/2020/04/20/%E8%AF%BB%E4%B9%A6%E5%92%8C%E5%86%99%E4%BD%9C/"/>
    <id>https://mikyming.online/2020/04/20/%E8%AF%BB%E4%B9%A6%E5%92%8C%E5%86%99%E4%BD%9C/</id>
    <published>2020-04-20T07:55:43.000Z</published>
    <updated>2020-06-01T12:25:20.481Z</updated>
    
    <content type="html"><![CDATA[<p>高中读了很多书，大学没怎么读书，反而是看了很多小说，打了很多游戏。</p><p>最近突然惊觉，应该继续读书了。同时和很优秀的几位朋友和前辈聊了一下，决定要开始认真的写作了。用写作来作为知识和思考的积累方式。</p><a id="more"></a><p>看啥书？</p><p>看专业书籍，文学书籍，以及引人思考的blog</p><p>写什么？</p><p>写所有想写的，越多越好。同时一周保持一篇有质量的技术文档。</p><p>怎么写？</p><p>真不知道怎么写。重新看on writing吧。。</p><p>如何进行分发，如何和人进行讨论？</p><p>分发和讨论先自己去找认识的人吧。</p><p>// TODO</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;高中读了很多书，大学没怎么读书，反而是看了很多小说，打了很多游戏。&lt;/p&gt;
&lt;p&gt;最近突然惊觉，应该继续读书了。同时和很优秀的几位朋友和前辈聊了一下，决定要开始认真的写作了。用写作来作为知识和思考的积累方式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书" scheme="https://mikyming.online/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="思考" scheme="https://mikyming.online/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>考研与未来的方向</title>
    <link href="https://mikyming.online/2020/04/20/%E8%80%83%E7%A0%94%E4%B8%8E%E6%9C%AA%E6%9D%A5%E7%9A%84%E6%96%B9%E5%90%91/"/>
    <id>https://mikyming.online/2020/04/20/%E8%80%83%E7%A0%94%E4%B8%8E%E6%9C%AA%E6%9D%A5%E7%9A%84%E6%96%B9%E5%90%91/</id>
    <published>2020-04-20T06:53:16.000Z</published>
    <updated>2020-04-20T07:49:50.086Z</updated>
    
    <content type="html"><![CDATA[<p>由于这一场超乎想象的疫情，我大学以来最重要的一个学期，一个思考的转折点在家中度过。在家开学4周之后，随着许多的朋友，学长开始走向新的人生方向，或是努力保研，或者准备考研，亦或者是开始寻找实习。我也开始真正意义上开始去寻找，去决定我未来两年的方向。</p><a id="more"></a><p>其实对于我来说只有两个方向可以去选择：考研，工作。当然这是十分笼统的方向，考什么专业的研，做什么方向，考研的目的是什么？是以找开发工作为导向的考研，还是以进一步进军学术界为方向的考研？工作的选择就更多了。去做一个什么方向的工作，去什么样的岗位。可以接受什么样的薪资和工作强度？在什么城市？选择一个什么样的行业？真是复杂。本以为大学比高中长，结果却是比高中短。短到只有一年半就必须去思考。</p><p>又到了一个选择决定努力的环节了。先不聊选择，聊聊怎么努力。如果工作，那么我现在就应该以工作为导向去学点真正有用的技术了。而且要学深。如果考研，那就以考研为导向去学习，最好能在大三前就确定研究的大致方向，增加考研竞争力。还有两个通用指标：英语和算法。</p><p>再看看现在的社会背景。未来一到两年整体经济发展肯定会因为疫情受到打击，就业形势肯定不会太好。同样的，随着大学的扩招和就业形势的问题，计算机会是一个持续热门的方向。考研难度也会增大。同时，我在广东，在华师。华师称不上什么好学校，但在省内还勉强是第二梯队。根据我以往的在广东省内发展的想法，考研想博得一个更好的平台就只有中大和华工两个选择。这内卷程度。。。怕了怕了。同样的，在就业方面，华师很难给我一个很好的平台。但是还是有资格去递一下下简历的。递完简历之后，当然就看个人能力了。没能力读研和工作都没得用。</p><p>聊一下周围人的情况。我不止一个人对我说，要不就保研要不就工作。同样有不止一个人对我说一定要有一个研究生文凭。这要怎么选择呢？我觉得还是要看自己未来的一个发展方向。如果追求的是安逸，那么一个研究生文凭相当有用。如果追求的是突破阶级，是奋斗是赚大钱，那么可能自身的能力更重要一点。无味的三年或是两年研究生，加上一年的准备时间可能是生命的浪费。但是有几个人的能力能达到呢？就算是不考研究生多个几年又怎么样呢……</p><p>我的目标是靠自己的能力在深圳快乐的活下去。因为只有这样才能真正的融入这个城市。我是爱这座新城的，我认可他的价值观，我在这长大，我熟悉他，我在这有着很多的朋友。虽然他很皮，这疫情时房子还能涨到7万就离谱。加速，都给我加速。我还是希望能在深圳生活的。之前写到过我追求相对自由（虽然那篇文章被我屏蔽了），那我应该考研还是不考呢？考吧。思考了这么久，我需要对自己有一个明确的回答了。其实我一直都知道考研才是最好的选择。我没有金钱的压力，出来工作是能赚点钱，是可以保持一个独立和自由。可是然后呢？是呀然后呢。其实我是在畏惧着考研，毕竟考不上怎么办，还有考研真的很累的呀。过了两年舒服生活的我怎么回到一个紧张的状态里去也还是一个问题。对于我这种喜欢代码，喜欢折腾的人来说，选择工作确实轻松不少。</p><p>总归还是要逼自己一把，这篇文章就为我接下来两年定一个目标——考研。那写这么长干嘛。哈哈哈哈。五年后更新。（如果我还记得的话。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于这一场超乎想象的疫情，我大学以来最重要的一个学期，一个思考的转折点在家中度过。在家开学4周之后，随着许多的朋友，学长开始走向新的人生方向，或是努力保研，或者准备考研，亦或者是开始寻找实习。我也开始真正意义上开始去寻找，去决定我未来两年的方向。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://mikyming.online/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="思考" scheme="https://mikyming.online/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>计网-数据链路层</title>
    <link href="https://mikyming.online/2020/04/15/%E8%AE%A1%E7%BD%91-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
    <id>https://mikyming.online/2020/04/15/%E8%AE%A1%E7%BD%91-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</id>
    <published>2020-04-15T11:50:55.000Z</published>
    <updated>2020-06-01T12:29:06.912Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>数据链路层是<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/OSI参考模型"  target="_blank" rel="noopener">OSI参考模型</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>中的第二层，介乎于<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/物理层/4329158"  target="_blank" rel="noopener">物理层</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>和<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/网络层/4329439"  target="_blank" rel="noopener">网络层</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>之间。<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/数据链路"  target="_blank" rel="noopener">数据链路</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>层在<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/物理层/4329158"  target="_blank" rel="noopener">物理层</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>提供的服务的基础上向<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/网络层/4329439"  target="_blank" rel="noopener">网络层</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>提供服务，其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。</p></blockquote><a id="more"></a><p>[TOC]</p>        <h2 id="基本概念"   >          <a href="#基本概念" class="heading-link"><i class="fas fa-link"></i></a>基本概念</h2>      <p>数据链路层使用的信道：</p><ul><li>点对点信道：使用一对一的点对点通信方式</li><li>广播信道：使用一对多的广播通信方式，过程比较复杂，需要专用的协议来协调</li></ul><p>本章<strong>最重要</strong>的内容是：</p><ul><li>数据链路层的点对点信道和广播信道的特点，以及这两种信道所使用的协议（PPP协议以及CSMA/CD协议）的特点。</li><li>数据链路层的三个基本问题：封装成帧、透明传输和差错检测</li><li>以太网MAC层的硬件地址</li><li>适配器、转发器、集线器、网桥、以太网交换机的作用以及使用场合。</li></ul>        <h2 id="使用点对点信道的数据链路层"   >          <a href="#使用点对点信道的数据链路层" class="heading-link"><i class="fas fa-link"></i></a>使用点对点信道的数据链路层</h2>      <ol><li><strong>数据链路和帧</strong></li></ol><ul><li><p>链路(物理链路)：从一个结点到相邻结点的一段物理线路，中间没有任何其他的交换节点</p><p>   链路是一条路径的一个组成部分：两台计算机之间的通信路径需要许多链路</p></li><li><p>数据链路(逻辑链路)：把实现了这些通信协议的硬件和软件加到链路上，就构成了数据链路(物理线路+协议)</p></li><li><p>网络适配器：既有硬件也包括软件，实现了通信协议，包括了数据链路层和物理层两层的功能</p></li><li><p>规程：数据链路层中，规程等同于协议</p></li><li><p>帧：点对点信道数据链路层的协议数据单元</p></li><li><p>数据链路层通信时的主要步骤：</p><p>  (1)结点A的数据链路层把网络层交下来的IP数据报添加首部和尾部封装成帧</p><p>  (2)结点A把封装好的帧发送给结点B的数据链路层</p><p>  (3)若结点B的数据链路层收到的帧无差错，则从收到的帧中提取IP数据报上交给网络层；否则丢弃这个帧</p></li><li><p>特点：数据链路层不用考虑物理层如何实现，所以就相当与对等层水平传输</p></li></ul><ol start="2"><li><strong>三个基本问题</strong></li></ol><ul><li>封装成帧</li><li>透明传输</li><li>差错检测</li></ul>        <h2 id="点对点协议PPP"   >          <a href="#点对点协议PPP" class="heading-link"><i class="fas fa-link"></i></a>点对点协议PPP</h2>      <ol><li><strong>PPP协议的特点</strong></li></ol><ul><li><p>作用域：用户计算机和ISP通信时所使用的数据链路层协议</p></li><li><p>PP协议应满足的需求：</p></li></ul><p>(1)简单：对数据链路层的帧，不需要纠错、序号、流量控制，简单作为首要要求；收到帧进行CRC检验，无差错则接收，反之丢弃</p><p>(2)封装成帧：必须规定特殊的字符作为帧定界符，使接收端从收到的比特流中准确找出帧的开始和结束位置</p><p>(3)透明性：必须保证数据传输的透明性，要能解决碰巧出现和帧定界符一样的比特组合的问题</p><p>(4)多种网络层协议：必须能够在同一条物理链路上同时支持多种网络层协议的运行，如IP等；在局域网和路由器上同样如此</p><p>(5)多种类型链路：必须能够在多种链路上运行</p><p>(6)差错检验：必须能够对接收端收到的帧进行检测，并立即丢弃有差错的帧</p><p>(7)检测连接状态：必须能够自动检测链路是否处于正常工作状态</p><p>(8)最大传送单元：必须对每一种类型的点对点链路设置MTU的标准默认值；促进各种实现之间的互操作性，若高层协议发送的分组数据部分超过MTU值，则丢弃并返回差错</p><p>(9)网络层地址协商：必须提供一种机制使通信的两个网络层的实体能够通过协商知道或能够配置彼此的网络层地址</p><p>(10)数据压缩协商：必须提供方法来协商使用数据压缩算法</p><ul><li><p>PPP的特点：不支持多点线路，只支持点对点的链路通信，只支持全双工链路</p></li><li><p>PPP协议不需要的功能：纠错、流量控制、序号、多点线路、半双工或单工链路（只工作在点对点链路）</p></li><li><p>PPP协议的组成：</p></li></ul><p>(1)将IP数据报封装到串行链路的方法；PPP支持异步链路，也支持面向比特的同步链路；IP数据报在PPP帧中数据部分，收到MTU限制</p><p>(2)用来建立、配置和测试链路连接的链路控制协议LCP</p><p>(3)网络控制协议NCP，其中每一个协议支持不同的网络层协议</p><ol start="2"><li><strong>PPP协议的帧格式</strong></li></ol><p><img loading="lazy" src="https://raw.githubusercontent.com/5522MIKE/PicGo/master/md/PPP%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%B8%A7%E6%A0%BC%E5%BC%8F.png" alt="20190128231023274"></p><ol start="2"><li><strong>PPP协议的工作状态</strong></li></ol><p><img loading="lazy" src="https://raw.githubusercontent.com/5522MIKE/PicGo/master/md/PPP%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%B7%A5%E4%BD%9C%E7%8A%B6%E6%80%81.png" alt="20190128230546475"></p>        <h2 id="使用广播信道的数据链路层"   >          <a href="#使用广播信道的数据链路层" class="heading-link"><i class="fas fa-link"></i></a>使用广播信道的数据链路层</h2>      <ol><li><strong>局域网的数据链路层</strong></li></ol><ul><li><p>局域网的特点：网络为一个单位所拥有，且地理范围和站点数目均有限</p></li><li><p>局域网的优点：</p></li></ul><p>(1)具有广播功能，从一个站点可方便的访问全网；局域网上主机共享局域网上各种硬件和软件资源</p><p>(2)便于系统的扩展和演变，各设备的位置可灵活调整和改变</p><p>(3)提高了系统的可靠性、可用性和生存性</p><ul><li><em>局域网的拓扑结构：总线网、环形网、星形网</em></li><li>媒体共享技术</li><li>网络协议</li><li>以太网的两个标准：DIX Ethernet V2；IEEE 802.3</li><li>数据链路层的两个子层</li><li>适配器的作用</li></ul><ol start="2"><li><em>CSMA\CD协议</em></li><li><em>使用集线器的星形拓扑</em></li><li><em>以太的网信道利用率</em></li><li><em>以太网的MAC层</em></li></ol><ul><li>MAC帧格式：</li></ul><p><img loading="lazy" src="https://raw.githubusercontent.com/5522MIKE/PicGo/master/md/MAC%E5%B8%A7%E6%A0%BC%E5%BC%8F.png" alt="20190128230546533"></p>        <h2 id="扩展的以太网"   >          <a href="#扩展的以太网" class="heading-link"><i class="fas fa-link"></i></a>扩展的以太网</h2>      <p><strong>物理扩展：集线器、光纤</strong></p><ol><li><strong>在数据链路层扩展以太网</strong></li><li><strong>虚拟局域网</strong></li></ol>        <h2 id="实验部分"   >          <a href="#实验部分" class="heading-link"><i class="fas fa-link"></i></a>实验部分</h2>      <p>无</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;数据链路层是&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://baike.baidu.com/item/OSI参考模型&quot;  target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OSI参考模型&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;中的第二层，介乎于&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://baike.baidu.com/item/物理层/4329158&quot;  target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;物理层&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;和&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://baike.baidu.com/item/网络层/4329439&quot;  target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;网络层&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;之间。&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://baike.baidu.com/item/数据链路&quot;  target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;数据链路&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;层在&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://baike.baidu.com/item/物理层/4329158&quot;  target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;物理层&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;提供的服务的基础上向&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://baike.baidu.com/item/网络层/4329439&quot;  target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;网络层&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;提供服务，其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://mikyming.online/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术探究" scheme="https://mikyming.online/tags/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>计网-物理层</title>
    <link href="https://mikyming.online/2020/04/11/%E8%AE%A1%E7%BD%91-%E7%89%A9%E7%90%86%E5%B1%82/"/>
    <id>https://mikyming.online/2020/04/11/%E8%AE%A1%E7%BD%91-%E7%89%A9%E7%90%86%E5%B1%82/</id>
    <published>2020-04-11T12:26:24.000Z</published>
    <updated>2020-04-28T03:02:23.932Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>物理层</strong>（或称物理层，Physical Layer）是<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/计算机网络"  target="_blank" rel="noopener">计算机网络</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/OSI模型"  target="_blank" rel="noopener">OSI模型</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>中最低的一层。物理层规定:为传输数据所需要的物理链路创建、维持、拆除，而提供具有机械的，电子的，功能的和规范的特性。简单的说，物理层确保原始的<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/数据/5947370"  target="_blank" rel="noopener">数据</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>可在各种物理媒体上传输。<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/局域网/98626"  target="_blank" rel="noopener">局域网</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>与<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/广域网/422004"  target="_blank" rel="noopener">广域网</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>皆属第1、2层。</p></blockquote><a id="more"></a><p>[TOC]</p>        <h2 id="基本概念"   >          <a href="#基本概念" class="heading-link"><i class="fas fa-link"></i></a>基本概念</h2>      <ol><li><p>物理层考虑的是怎样才能在连接各种计算机的传输媒体上传输数据比特流，而不是指具体的传输媒体。</p></li><li><p>物理层的作用是要尽可能地屏蔽掉不同传输媒体和通信手段的差异。</p></li><li><p>物理层的主要任务:确定与传输媒体的接口的一些特性：<strong>机械特性</strong>、<strong>电气特性</strong>、<strong>功能特性</strong>和<strong>过程特性</strong>。</p><ul><li><p>机械特性：接口所用接线器的形状和尺寸、引脚数目和排列、固定和锁定装置等</p></li><li><p>电气特性：接口电路的各条线上出现的电压范围</p></li><li><p>功能特性：某条线上出现某一电平电压的意义</p></li><li><p>过程特性：对于不同功能的各种可能事件的出现顺序</p></li></ul></li></ol>        <h2 id="数据通信的基础知识"   >          <a href="#数据通信的基础知识" class="heading-link"><i class="fas fa-link"></i></a>数据通信的基础知识</h2>      <ol><li><p>数据通信系统的模型</p><p>数据通信系统可以划分为三大部分：<strong>源系统</strong>（或发送端、发送方）、<strong>传输系统</strong>（或传输网络）、<strong>目的系统</strong>（或接收端、接收方）</p><p><img loading="lazy" src="https://raw.githubusercontent.com/5522MIKE/PicGo/master/md/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%A8%A1%E5%9E%8B.jpg" alt="数据通信模型"></p></li><li><p>有关信道的几个基本概念</p><p>信道：表示向某一个方向传送信息的媒体</p><ul><li>单向通信</li><li>双向交替通信</li><li>双向同时通信</li></ul><p>基带信号：来自信源的信号；如计算机输出的代表文字或图像的数据信号都是基带信号</p><p>调制分类：</p><ul><li><p>基带调制(编码)：仅对基带信号的波形进行变换，使其能与信道特性相适应，变换后的信号仍是基带信号</p></li><li><p>带通调制：使用载波进行调制，把基带信号的频率范围移到较高频段，并转换为模拟信号，变换后的信号称为带通信号</p></li></ul><p>常用的编码方式：</p><ul><li>不归零制</li><li>归零制</li><li>曼切斯特编码</li><li>差分曼切斯特编码</li></ul><p>基本的带通调制方法：</p><ul><li>调幅（AM）</li><li>调频（FM）</li><li>调相（PM）</li><li>特殊：正交振幅调制QAM</li></ul></li><li><p>信道的极限容量</p><p>限制码元在信道上传输速率的因素：</p><ul><li>信道能够通过的频率范围    （码间串扰，奈氏准则）</li><li>信噪比    （香农公式）</li></ul></li></ol>        <h2 id="物理层下面的传输媒体"   >          <a href="#物理层下面的传输媒体" class="heading-link"><i class="fas fa-link"></i></a>物理层下面的传输媒体</h2>      <p><strong>传输媒体是数据传输系统中在发送器和接收器之间的物理通路</strong></p><p>分类：</p><ul><li>引导型：双绞线、同轴电缆、光纤</li><li>非引导型：电磁波无线传输</li></ul>        <h2 id="信道复用技术"   >          <a href="#信道复用技术" class="heading-link"><i class="fas fa-link"></i></a>信道复用技术</h2>      <p><strong>复用：允许用户使用一个共享的信道进行通信，降低成本，提高利用率</strong></p><ul><li>频分复用</li><li>时分复用</li><li>统计时分复用</li><li>波分复用WDM</li><li><strong>码分复用CDM</strong></li></ul>        <h2 id="数字传输系统"   >          <a href="#数字传输系统" class="heading-link"><i class="fas fa-link"></i></a>数字传输系统</h2>      <p>早期缺点：</p><ul><li>速率标准不统一</li><li>不是同步传输</li></ul><p>现代的传输网络的传输媒体：光纤</p><p>同步光纤网(SONET)：各级时钟都来自一个非常精确的主时钟，为光纤传输系统定义了同步传输的线路速率等级结构</p><p>同步数字系列(SDH)：由SONET为基础发展的国际标准</p>        <h2 id="宽带接入技术"   >          <a href="#宽带接入技术" class="heading-link"><i class="fas fa-link"></i></a>宽带接入技术</h2>      <p>ADSL技术：非对称数字用户线，将原有的模拟电话线进行改造，使其能够承载宽带业务，将0-4k的低端频谱留给电话使用，将剩余部分给宽带使用，其中上行带宽小于下行带宽。    第二代ADSL：得到更高的数据率，采用无缝速率自适应技术，可在运营中不中断通信和不产生误码的情况下，自适应的调整数据率</p><p>光纤同轴混合网(HFC)：是目前覆盖面较广的有线电视网，采用模拟技术，频分复用，主干部分使用光纤，入户部分使用同轴电缆</p><p>FTTx技术：是一种实现宽带居民接入网的方案，代表多种宽带光纤接入方式</p>        <h2 id="实验部分"   >          <a href="#实验部分" class="heading-link"><i class="fas fa-link"></i></a>实验部分</h2>      <p>实验过程中发生了一些问题，后来发现是对原理不熟悉导致的。比如第一次配置vtp的时候没有配置trunk。一个警醒，在实验前一定要搞定所有的流程概念。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;物理层&lt;/strong&gt;（或称物理层，Physical Layer）是&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://baike.baidu.com/item/计算机网络&quot;  target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;计算机网络&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://baike.baidu.com/item/OSI模型&quot;  target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OSI模型&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;中最低的一层。物理层规定:为传输数据所需要的物理链路创建、维持、拆除，而提供具有机械的，电子的，功能的和规范的特性。简单的说，物理层确保原始的&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://baike.baidu.com/item/数据/5947370&quot;  target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;数据&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;可在各种物理媒体上传输。&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://baike.baidu.com/item/局域网/98626&quot;  target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;局域网&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;与&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://baike.baidu.com/item/广域网/422004&quot;  target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;广域网&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;皆属第1、2层。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://mikyming.online/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术探究" scheme="https://mikyming.online/tags/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>搭建一个自己的博客</title>
    <link href="https://mikyming.online/2020/04/03/%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://mikyming.online/2020/04/03/%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-04-03T09:09:41.000Z</published>
    <updated>2020-09-18T05:46:26.316Z</updated>
    
    <content type="html"><![CDATA[<p>本文面向无基础学生。</p><p>博客为静态博客，无需费用。</p><p>使用的工具和框架：<br>GitHub Pages + hexo</p><a id="more"></a>        <h2 id="为什么要搭建个人博客"   >          <a href="#为什么要搭建个人博客" class="heading-link"><i class="fas fa-link"></i></a>为什么要搭建个人博客</h2>      <ul><li>将自己的思考和学习经历记录下来作为一个知识沉淀的平台</li><li>在搭建博客和升级博客的过程中学习技术</li><li>展示你自己，并且可以作为他人了解你的渠道</li><li>成为社区的一份子，帮助到他人。博客中记录的bug和经历可以让更多的人少走弯路。</li></ul><p>优秀的个人博客推荐：</p><ul><li><span class="exturl"><a class="exturl__link"   href="http://cppblog.com/vczh"  target="_blank" rel="noopener">轮子哥/vczh</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="http://linux.vbird.org/"  target="_blank" rel="noopener">鳥哥的 Linux 私房菜</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="http://www.yinwang.org/"  target="_blank" rel="noopener">王垠</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="http://www.ruanyifeng.com/home.html"  target="_blank" rel="noopener">阮一峰的个人网站</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul>        <h2 id="使用GitHub-page-hexo快速搭建"   >          <a href="#使用GitHub-page-hexo快速搭建" class="heading-link"><i class="fas fa-link"></i></a>使用GitHub page + hexo快速搭建</h2>              <h3 id="环境准备"   >          <a href="#环境准备" class="heading-link"><i class="fas fa-link"></i></a>环境准备</h3>      <p>安装<span class="exturl"><a class="exturl__link"   href="https://nodejs.org/zh-cn/"  target="_blank" rel="noopener">Node.js</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>和<span class="exturl"><a class="exturl__link"   href="https://git-scm.com/"  target="_blank" rel="noopener">Git</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>并注册<span class="exturl"><a class="exturl__link"   href="https://github.com/"  target="_blank" rel="noopener">GitHub</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>安装成功检验：</p><p>在命令行执行下列命令：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git --version</span><br><span class="line">git version 2.9.0.windows.1</span><br><span class="line">$ node --version</span><br><span class="line">v10.15.3</span><br><span class="line">$ npm --version</span><br><span class="line">6.4.1</span><br></pre></td></tr></table></div></figure>        <h3 id="安装Hexo"   >          <a href="#安装Hexo" class="heading-link"><i class="fas fa-link"></i></a>安装Hexo</h3>      <p>在命令行执行下列命令：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli<span class="comment"># -g 代表着全局安装</span></span><br></pre></td></tr></table></div></figure><p>完成后建立你的个人博客：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blogName</span><br><span class="line">$ <span class="built_in">cd</span> blogName</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></div></figure><p>博客文件夹的目录如下：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├───.git</span><br><span class="line">├───scaffolds<span class="comment"># 博客的模板文件夹</span></span><br><span class="line">├───<span class="built_in">source</span><span class="comment"># 资源文件夹</span></span><br><span class="line">│   └───_posts<span class="comment"># 你的博客源文件(.md)</span></span><br><span class="line">└───themes<span class="comment"># 主题文件夹</span></span><br><span class="line">    └───landscape<span class="comment"># 默认主题</span></span><br><span class="line">├───.gitignore</span><br><span class="line">├───.gitmodules</span><br><span class="line">├───_config.yml<span class="comment"># 博客的配置文件</span></span><br><span class="line">├───package.json <span class="comment"># 项目管理文件</span></span><br></pre></td></tr></table></div></figure>        <h3 id="创建你的第一篇博文"   >          <a href="#创建你的第一篇博文" class="heading-link"><i class="fas fa-link"></i></a>创建你的第一篇博文</h3>      <p>新建一篇博文：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">'文章标题'</span></span><br></pre></td></tr></table></div></figure><p>在 <code>/source/_posts</code>文件夹下找到你的博文，使用Markdown编辑器打开并编辑。</p><p>推荐使用Typora进行编辑。<br>在<span class="exturl"><a class="exturl__link"   href="https://www.markdownguide.org/basic-syntax/"  target="_blank" rel="noopener">Markdown Guide</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>或者<span class="exturl"><a class="exturl__link"   href="https://www.runoob.com/markdown/md-tutorial.html"  target="_blank" rel="noopener">菜鸟教程</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>学习Markdown语法。</p><p>保存后运行：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate <span class="comment"># 生成静态文件，可简写为 hexo g</span></span><br><span class="line">$ hexo server <span class="comment"># 启动服务器。默认情况下，访问网址为：`http://localhost:4000/`。可以简写为 hexo s</span></span><br></pre></td></tr></table></div></figure><p>此时已经可以在<code>public</code>文件夹下看到完整的静态文件。<br>在浏览器中输入<code>http://localhost:4000/</code>就可以看到预览效果了。</p>        <h3 id="部署到GitHub-Pages"   >          <a href="#部署到GitHub-Pages" class="heading-link"><i class="fas fa-link"></i></a>部署到GitHub Pages</h3>      <ol><li><p>在GitHub创建一个名为<code>username.github.io</code>的新仓库，其中<code>username</code>是您在GitHub上的用户名（或组织名称）。<br>! 如果仓库的第一部分与您的用户名不完全匹配，则它将不起作用，因此请确保正确无误。</p></li><li><p>转到要存储项目的文件夹，然后克隆新的仓库：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/username/username.github.io</span><br></pre></td></tr></table></div></figure></li><li><p>将之前生成的<code>public</code>文件夹下的文件拷贝到本地仓库中。再运行：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add --all</span><br><span class="line">$ git commit -m <span class="string">"Initial commit"</span></span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></div></figure></li><li><p>等待一段时间你就可以启动浏览器并转到<code>https://username.github.io</code>你就可以看到自己的博客啦！</p></li></ol><p>// 将博客部署到GitHub还有其他方法，比如可以使用<code>hexo deploy</code>。这个就请自行学习探索啦。</p>        <h3 id="了解并丰富你的博客"   >          <a href="#了解并丰富你的博客" class="heading-link"><i class="fas fa-link"></i></a>了解并丰富你的博客</h3>      <p>以下是一些进阶网站：</p><ul><li><span class="exturl"><a class="exturl__link"   href="https://segmentfault.com/a/1190000017986794"  target="_blank" rel="noopener">超详细Hexo+Github Page搭建技术博客教程</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://hexo.io/zh-cn/"  target="_blank" rel="noopener">hexo官网</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://pages.github.com/"  target="_blank" rel="noopener">GitHub Pages</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul>        <h2 id="进阶博客搭建"   >          <a href="#进阶博客搭建" class="heading-link"><i class="fas fa-link"></i></a>进阶博客搭建</h2>      <p>想必很多同学在完成简单的静态博客搭建后都想尝试更加绚丽，互动性和自定义更强的博客。<br>首先你需要购买一个域名，拥有一个服务器。<br>使用<span class="exturl"><a class="exturl__link"   href="https://zh-cn.wordpress.com/"  target="_blank" rel="noopener">WordPress</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>可以快速搭建一个动态博客。<br>如果你不仅仅满足于使用框架和平台，那么你可能需要去了解并学习一些更加深入的东西，前端可以用Vue或者React，后端用python的Django,Flask框架实现快速开发个人博客。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文面向无基础学生。&lt;/p&gt;
&lt;p&gt;博客为静态博客，无需费用。&lt;/p&gt;
&lt;p&gt;使用的工具和框架：&lt;br&gt;GitHub Pages + hexo&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://mikyming.online/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="解决方案" scheme="https://mikyming.online/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>我的win环境备份</title>
    <link href="https://mikyming.online/2020/03/23/%E6%88%91%E7%9A%84win%E7%8E%AF%E5%A2%83%E5%A4%87%E4%BB%BD/"/>
    <id>https://mikyming.online/2020/03/23/%E6%88%91%E7%9A%84win%E7%8E%AF%E5%A2%83%E5%A4%87%E4%BB%BD/</id>
    <published>2020-03-23T08:22:38.000Z</published>
    <updated>2020-09-23T15:15:06.654Z</updated>
    
    <content type="html"><![CDATA[<p>最近可能要重装电脑或者购置新的机器，故记录现在我需要的一台win系统的电脑应该需要什么样的环境。</p><a id="more"></a><p><strong>装个linux它不香吗</strong></p>        <h2 id="环境"   >          <a href="#环境" class="heading-link"><i class="fas fa-link"></i></a>环境</h2>              <h3 id="语言类"   >          <a href="#语言类" class="heading-link"><i class="fas fa-link"></i></a>语言类</h3>      <p>MinGW：Windows下的基于GCC 程序开发环境<br>PHP<br>JAVA<br>Node.js<br>Python</p>        <h3 id="工具类"   >          <a href="#工具类" class="heading-link"><i class="fas fa-link"></i></a>工具类</h3>      <p>Git：版本管理工具，必用<br>Terminal：终端，别用cmd了。<br>WSL2：win下的Linux子系统。在某些环境下很好用，比如搭配vscode写代码。  </p>        <h3 id="数据库"   >          <a href="#数据库" class="heading-link"><i class="fas fa-link"></i></a>数据库</h3>      <p>mysql<br>sqlserver</p>        <h3 id="服务器"   >          <a href="#服务器" class="heading-link"><i class="fas fa-link"></i></a>服务器</h3>      <p>apache<br>nginx</p>        <h2 id="日常软件"   >          <a href="#日常软件" class="heading-link"><i class="fas fa-link"></i></a>日常软件</h2>      <p>火绒：十分简洁的安全软件<br>everything：电脑文件查找软件，可以极快的找到文件<br>7-zip/Bandzip：优秀的压缩工具<br>Internet Download Manager：下载神器<br>搜狗输入法<br>sumatraPDF：PDF阅读器<br>office：特别提一下visio，绘图软件<br>CAJViewer：文献阅读器，用来读知网论文很方便  </p>        <h2 id="专业工具"   >          <a href="#专业工具" class="heading-link"><i class="fas fa-link"></i></a>专业工具</h2>              <h3 id="编程类"   >          <a href="#编程类" class="heading-link"><i class="fas fa-link"></i></a>编程类</h3>      <p>JetBrain全家桶(toolbox，PHPstorm，DataGrip，Clion，IDEA 等)：IDE世界里最强大的全家桶。<strong>学生可以用.edu邮箱免费使用</strong><br>CodeBlocks：优秀且简单易用的C/C++IDE<br>Eclipse：上古神器，一般用来写JAVA。实则干啥都能 //实则是学校要用<br>VSCode：一个介于IDE和编辑器的神器。熟练使用插件和配置可以达到<strong>awesome</strong>的效果。  强力推荐<br>Xshell：SSH客户端。我一般用来连接云服务器<br>VMware：虚拟机软件  </p>        <h3 id="工程类"   >          <a href="#工程类" class="heading-link"><i class="fas fa-link"></i></a>工程类</h3>      <p>Cisco Packet Tracer：网络仿真软件，学计网时候用的<br>Wireshark：网络封包分析软件<br>Postman: 接口测试<br>Axure：原型设计工具，可以学生认证<br>XMind：思维导图<br>腾讯会议：用来小组讨论十分方便和稳定  </p>        <h3 id="数学、论文类"   >          <a href="#数学、论文类" class="heading-link"><i class="fas fa-link"></i></a>数学、论文类</h3>      <p>MATLAB：数学软件。这个也有很多学校买了，可以去学校软件站看看<br>SPSS：数据分析软件<br>Typora：神仙编辑器，最好的markdown编辑器。本文就是用它写的<br>LaTeX：排版系统，用来写论文非常好  </p>        <h3 id="其他"   >          <a href="#其他" class="heading-link"><i class="fas fa-link"></i></a>其他</h3>      <p>rufus：引导盘制作工具<br>Adobe全家桶(PS，Au，Pr 等)<br>ShadowsocksR/v2rayN：误  </p>        <h2 id="娱乐软件"   >          <a href="#娱乐软件" class="heading-link"><i class="fas fa-link"></i></a>娱乐软件</h2>      <p>Chrome<br>Firefox<br>Edge<br>Tim/QQ<br>微信<br>网易云音乐<br>百度网盘<br>PotPlayer：极强大的播放器<br>Steam(Wallpaper Engine,Fences)<br>WeGame<br>Origin  </p>        <h2 id="一些简单的搭配应用场景"   >          <a href="#一些简单的搭配应用场景" class="heading-link"><i class="fas fa-link"></i></a>一些简单的搭配应用场景</h2>      <p>// TODO 待更<br>vscode + wsl/wsl2</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近可能要重装电脑或者购置新的机器，故记录现在我需要的一台win系统的电脑应该需要什么样的环境。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://mikyming.online/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="https://mikyming.online/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>美赛</title>
    <link href="https://mikyming.online/2020/02/12/%E7%BE%8E%E8%B5%9B/"/>
    <id>https://mikyming.online/2020/02/12/%E7%BE%8E%E8%B5%9B/</id>
    <published>2020-02-12T05:41:02.000Z</published>
    <updated>2020-06-01T12:25:09.048Z</updated>
    
    <content type="html"><![CDATA[<p>国赛讲究实力，美赛讲究创新。   </p><p>//本文是为了数学建模美赛做赛前准备</p><a id="more"></a><p>时间：北京时间3月6日上午6时至3月10日上午9时<br>流程：</p><ol><li>3月6日上午6时前往官网查看题目(<span class="exturl"><a class="exturl__link"   href="http://www.comap.com/undergraduate/contests/mcm"  target="_blank" rel="noopener">http://www.comap.com/undergraduate/contests/mcm</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>)</li><li>3月10日上午9时前提交论文</li></ol><ul><li><p>1 提交论文电子版：<br>每队必须提交一份论文电子版，邮箱地址：<span class="exturl"><a class="exturl__link"   href="mailto:solutions@comap.com"  target="_blank" rel="noopener">solutions@comap.com</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。同时提交指导教师一份。截止日期：北京时间2020年3月10日上午9:00。提交的论文不允许有任何增加或修改，否则将被认为违规而取消比赛资格。不允许重复发送，发送之前建议由指导教师定稿。（由于临近比赛结束时网络拥堵，发送邮件可能有延迟，建议7点前完成发送）</p></li><li><p>2 邮件主题为COMAP+队号。例如：COMAP2020449</p></li><li><p>3 用队号作为邮件附件的名称。</p></li><li><p>4 组委会只接受PDF或WORD文件（建议采用ＰＤＦ格式，公式不容易乱）。不包括控制页，程序或软件，因为不会被用在评审过程中（程序代码不是必须的，只要论文就行）。学生、老师或学校名称不应出现在论文的任何部分。摘要页（Summary Sheet）应为论文的第一页。注意：附件必须小于17MB。禁止使用云服务。</p></li><li><p>5 发送论文后，再次登录美赛官网，点击Submit Final Solution Paper。</p></li></ul><p>根据时间顺序分为以下几个部分：</p><ol><li>赛前学习</li></ol><ul><li><p>1 文献和数据网站<br><span class="exturl"><a class="exturl__link"   href="https://scholar.google.com/"  target="_blank" rel="noopener">Google Scholar</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>(需要梯子)<br><span class="exturl"><a class="exturl__link"   href="https://tianchi.aliyun.com/dataset/?spm=5176.12281905.0.0.358b5699IjonJQ"  target="_blank" rel="noopener">阿里开发数据库</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br><span class="exturl"><a class="exturl__link"   href="https://www.cnki.net/"  target="_blank" rel="noopener">cnki</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br><span class="exturl"><a class="exturl__link"   href="https://sedac.ciesin.columbia.edu/"  target="_blank" rel="noopener">nasa</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br><span class="exturl"><a class="exturl__link"   href="https://science.sciencemag.org/"  target="_blank" rel="noopener">science</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br><span class="exturl"><a class="exturl__link"   href="https://www.deepdyve.com/"  target="_blank" rel="noopener">deepdyve</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>  </p></li><li><p>2 软件<br>编程工具：MATLAB<br>统计建模：SPSS<br>写作：LaTex/word<br>// TODO<br>流程图制作：ppt、visio、亿图<br>插图制作：PS<br>团队协作：线上交流+语音+在线文档  </p></li><li><p>3 数学建模    // TODO</p><pre><code>模型储备</code></pre></li><li><p>4 题型分析及选择(由于我们只可能在3月参加，故只分析三道)</p></li></ul><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MCM Problem B</span><br><span class="line">MCM Problem C</span><br><span class="line">ICM Problem F（推荐且论文页数不超过20）</span><br></pre></td></tr></table></div></figure><ul><li>5 论文规范及书写安排 // TODO</li></ul><ol start="2"><li><p>模拟比赛<br>  // TODO</p></li><li><p>赛前准备</p><pre><code>(1) 物资准备：包括但不限于 软件准备 比赛通信 资料网站准备 邮件准备  (2) 分工：模拟比赛后划分  (3) 时间安排: 模拟比赛后安排  </code></pre></li></ol><p>附录：</p><p>2017年国赛B题分析：</p><p>以下分析基于一等奖的两篇优秀论文。</p><p>总述：选择这一题的主要原因是因为这道题较为简单，而且年份较近具有一定的代表性。另外就是中文好理解。</p><p>以下分析只包含个人感受和一定的主观思考。</p><p>优秀论文1：数学建模能力极强。其他方面的能力并不算突出，编程水平较弱。</p><p>优秀论文2：技术水平整体高。包括建模、编程水平还有写作水平。写作格式值得借鉴。</p><p>两篇优秀论文的共通点是数学建模能力都很强，而且均体现了各自对题目的思考，并成功的将思考转化为数学模型。（论文1在问题2处引入了吸引力因子，论文2标黑的都是自己引入的参数或者重点）两篇文章的正文部分均在20页左右（17,23）。我们写作时需要注意美赛题目对页数的要求。</p><p>这里额外说一下关于数学模型的使用。在论文1讨论问题4时，明确提出套用了定价模型的两个公式。问题2仿照库伦定律进行了量化，问题3使用了K-means聚类算法。论文2使用ISODATA算法分析问题1，问题2使用位势函数法。较为专业的地方两篇论文都参考或者使用或参考了成熟的数学模型。</p><p>简单提一下我个人认为的要点：</p><ol><li><p>分析问题和初步的解决思路(这里需要大量的建模知识和信息获取能力)</p></li><li><p>细化思路并探索可行性（难点突破和时间权衡）</p></li><li><p>建立数学模型（论文和成熟模型的查找及化用）</p></li><li><p>编程和写作（协同方案）</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;国赛讲究实力，美赛讲究创新。   &lt;/p&gt;
&lt;p&gt;//本文是为了数学建模美赛做赛前准备&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://mikyming.online/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="思考" scheme="https://mikyming.online/categories/%E6%8A%80%E6%9C%AF/%E6%80%9D%E8%80%83/"/>
    
    
      <category term="技术探究" scheme="https://mikyming.online/tags/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>当我谈跑步时，我在谈些什么</title>
    <link href="https://mikyming.online/2019/12/22/run/"/>
    <id>https://mikyming.online/2019/12/22/run/</id>
    <published>2019-12-22T02:13:59.000Z</published>
    <updated>2020-06-01T12:24:43.441Z</updated>
    
    <content type="html"><![CDATA[<p><img loading="lazy" src="/img/run.jpg" alt="run"></p><a id="more"></a><p>这个学期我跑了很多次步。有记录的超过2.5公里的就有34次。所以虽然我在长胖，可我还是感觉我的身体更加“轻盈”了哈哈哈。可以说这是我人生中第一次长时间的坚持跑步  //大概算长时间吧。<br>而且打算坚持一下。于是想找一个方法坚持下去。</p><p>我很早就知道村上春树这个人，大概是在初中。我高中很喜欢日本文学，在学校图书馆借了很多日本的书看，其中最多的就是村上先生的书。我喜欢他的那种看似有些冷淡却始终热爱生活的文字。于是这次我还是选择去看看他的书《当我谈跑步时，我在谈些什么》。</p><p>当我在跑步时，我在听歌。我不停的听歌。音乐给我力量。甚至在最后的冲刺时，我会切到一首激昂的歌才开始用尽全力向前跑。这真是非常畅快的体验。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/run.jpg&quot; alt=&quot;run&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书" scheme="https://mikyming.online/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="随笔" scheme="https://mikyming.online/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="思考" scheme="https://mikyming.online/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>小偷家族</title>
    <link href="https://mikyming.online/2019/12/07/thief/"/>
    <id>https://mikyming.online/2019/12/07/thief/</id>
    <published>2019-12-07T07:01:19.000Z</published>
    <updated>2020-06-01T12:24:33.955Z</updated>
    
    <content type="html"><![CDATA[<p><img loading="lazy" src="/img/thief.jpg" alt="小偷家族"></p><a id="more"></a><p>世界上真的只有一种病 是穷病吗？<br>不是的。<br>这个世界还有一种病叫 缺爱。<br>真是一部很压抑又很温暖的电影。<br>看完了<br>不知道为什么想到了东野的嫌疑人x的献身，石神几欲呕出灵魂。而在小偷家族中，一切归于平静。<br>所有的一切都被社会和时间慢慢的抹去。<br>当这一种色彩渐渐消失之后，<br>这六个毫无血缘关系的人，<br>他们的心还在一切。<br>因为什么？<br>或许就像影片中的父亲说的那样。<br>是爱将这个家族联系在一起。</p><p>小偷家族<br>他们中很多人世第三只手，<br>他们全都有两颗心。<br>一个留给自己<br>一个分享给别人。<br>他们在路上拾起别人丢弃的心。</p><p>到底是什么导致了这样的家族出现呢？<br>很多很多原因，<br>很多我现在根本不能完全理解和领会的东西。<br>不过这个家族在被发现后，<br>至少社会给了他们最低的保障。<br>我们能保证我们的社会有那个兜底的网吗？<br>让失足的人不会就此沉沦，<br>让沉沦的人不会跌下深渊。<br>我们有这种爱吗？<br>这种爱又是什么爱呢？<br>不知道。<br>我真的搞得懂这部电影在说什么吗？<br>不知道。<br>不知道多少年后我会重新再回来看一遍他。<br>希望那时我能回答几个知道。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/thief.jpg&quot; alt=&quot;小偷家族&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://mikyming.online/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://mikyming.online/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="思考" scheme="https://mikyming.online/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>Git和GitHub入门</title>
    <link href="https://mikyming.online/2019/12/03/Git%E5%92%8CGitHub%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://mikyming.online/2019/12/03/Git%E5%92%8CGitHub%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</id>
    <published>2019-12-03T15:01:05.000Z</published>
    <updated>2020-04-21T14:16:37.222Z</updated>
    
    <content type="html"><![CDATA[<p><em>经过jl大佬和hy大佬的指导后重新编写</em></p><blockquote><p>放GitHublogo章鱼猫的图片来作为引入</p></blockquote><p><em>what</em></p>        <h3 id="Git和GitHub是什么"   >          <a href="#Git和GitHub是什么" class="heading-link"><i class="fas fa-link"></i></a>Git和GitHub是什么</h3>      <p><strong>Git</strong> (/ɡɪt/) is a distributed version-control system for tracking changes in source code during software development.  –wikipedia<br><strong>GIT</strong>是一个分布式版本控制系统用于跟踪的变化系统的源代码中的软件开发。–维基百科</p><p><strong>GitHub</strong> is an American company that provides hosting for software development. Github includes version control using Git, which allows software projects to keep track of all versions and revert to previous versions if necessary.  –wikipedia<br><strong>GitHub</strong>是一家美国公司，为软件开发提供托管。GitHub包含使用Git进行的版本控制，该版本控制允许软件项目跟踪所有版本，并在必要时还原为以前的版本。–维基百科</p><p><strong>用人话说Git是啥</strong><br>Git是一种分布式版本控制系统。但它的核心其实是数据库。Git把我们的每一次提交记录到数据库中。我们可以通过对数据库进行查询来了解并回溯每一次提交，这就实现了版本控制。然后我们可以选择将这个数据库完整的克隆到另一台服务器上，这就实现了分布式。</p><a id="more"></a>        <h3 id="Git的工作流程"   >          <a href="#Git的工作流程" class="heading-link"><i class="fas fa-link"></i></a>Git的工作流程</h3>      <p>Git将我们的每一次提交放到工作目录的缓存空间，完成保存。然后等你想提交到远程仓库的时候再从缓存区里提交出去。同样的，你也可以从远程仓库将文件下载回工作目录。</p><p><img loading="lazy" src="/img/git-workflow1.png" alt="git-workflow1"></p>        <h3 id="啥是分布式版本控制系统-Distributed-Version-Control"   >          <a href="#啥是分布式版本控制系统-Distributed-Version-Control" class="heading-link"><i class="fas fa-link"></i></a>啥是分布式版本控制系统(Distributed Version Control)</h3>      <p>说到分布式版本控制系统就不得不提到集中式版本控制系统，他们最大的差别在于分布式的仓库可以有很多份。其实这是一个去中心化的概念。在集中式版本控制系统中，拥有唯一的中心也就是我们常说的服务器。中央服务器是一切的核心，储存着所有的数据。而分布式版本控制则是一个去中心，或者说是多中心的系统。每一个开发者的本地仓库都拥有着全部的数据。 “push” “pull” 操作则是为了让所有的仓库数据统一而已。</p><p><img loading="lazy" src="/img/distributed.png" alt="distributed system"></p>        <h3 id="Git-VS-SVN"   >          <a href="#Git-VS-SVN" class="heading-link"><i class="fas fa-link"></i></a>Git VS SVN</h3>      <div class="table-container"><table><thead><tr><th align="left"></th><th align="center">集中式（SVN）</th><th align="center">分布式（Git）</th></tr></thead><tbody><tr><td align="left">有无中央服务器</td><td align="center">有。开发者脱离服务器几乎无法工作</td><td align="center">无。开发者有本地仓库</td></tr><tr><td align="left">分支操作</td><td align="center">创建分支则所有人都有此分支</td><td align="center">分支操作不影响其他人</td></tr><tr><td align="left">提交</td><td align="center">直接提交到中央版本库</td><td align="center">首先提交到本地缓存区，执行push操作才提交到版本库</td></tr><tr><td align="left">图释</td><td align="center"><img loading="lazy" src="/img/svn.jpg" width="50%"/></td><td align="center"><img loading="lazy" src="/img/git.jpg" width="50%"/></td></tr></tbody></table></div><p><em>what</em></p><blockquote><p>// 有一说一git/github的功能详细并没有做,还是沿用了原来的简易版本</p></blockquote>        <h3 id="我们用Git和GitHub来干什么"   >          <a href="#我们用Git和GitHub来干什么" class="heading-link"><i class="fas fa-link"></i></a>我们用Git和GitHub来干什么</h3>      <ul><li>代码托管    //不解释</li><li>项目管理    //如，版本控制、协作编程</li><li>资源备份    //如，托管编程环境、备份核心代码</li><li>托管静态网页    //如，GitHub Page</li><li>个人简历    //你可以在GitHub上展示你自己</li><li>查找资料    //GitHub可能是全世界程序方面资料最多的地方</li><li>交朋友    //全球最大的同性交友平台</li><li>资讯来源    //GitHub热榜！比知乎更有料，比微博更劲爆</li></ul><p><em>how</em></p>        <h3 id="Git的安装和使用"   >          <a href="#Git的安装和使用" class="heading-link"><i class="fas fa-link"></i></a>Git的安装和使用</h3>              <h4 id="安装"   >          <a href="#安装" class="heading-link"><i class="fas fa-link"></i></a>安装</h4>      <p><span class="exturl"><a class="exturl__link"   href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git"  target="_blank" rel="noopener">点击此处进入官方安装教程</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h4 id="使用"   >          <a href="#使用" class="heading-link"><i class="fas fa-link"></i></a>使用</h4>      <p>让我们先新建一个仓库（文件夹），进入文件夹并打开Git Bash。<br>执行</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></div></figure><p>接下来你可以执行如下命令以创建一个本地仓库的克隆版本：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> /path/to/repository</span><br></pre></td></tr></table></div></figure><p>如果是远端服务器上的仓库，你的命令会是这个样子：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> username@host:/path/to/repository</span><br></pre></td></tr></table></div></figure><p>搭建好仓库后，如果你有所改动可以把它添加到缓存区，使用如下命令：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add &lt;filename&gt;</span><br><span class="line">$ git add *//将所有的改动都添加</span><br></pre></td></tr></table></div></figure><p>最后使用如下命令以实际提交改动：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">"代码提交信息"</span></span><br></pre></td></tr></table></div></figure><p>现在，你的改动已经提交到了 HEAD，但是还没到你的远端仓库。<br>执行如下命令以将这些改动提交到远端仓库：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master//可以把 master 换成你想要推送的任何分支。</span><br></pre></td></tr></table></div></figure><p><strong>注意事项</strong></p><ul><li>git commit 命令一定要添加描述，否则会无法成功运行</li></ul><p><em>本段参考自<span class="exturl"><a class="exturl__link"   href="https://www.bootcss.com/p/git-guide/"  target="_blank" rel="noopener">https://www.bootcss.com/p/git-guide</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>/</em><br><em>想要深入了解GIt的同学可以前去参考</em></p><blockquote><p>// Git命令太多，基本命令已经在上文展示故取消Git命令大全板块<br>// 使用git中常见的问题和注意事项过于杂乱，故只提一点</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;经过jl大佬和hy大佬的指导后重新编写&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;放GitHublogo章鱼猫的图片来作为引入&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;what&lt;/em&gt;&lt;/p&gt;

        &lt;h3 id=&quot;Git和GitHub是什么&quot;   &gt;
          &lt;a href=&quot;#Git和GitHub是什么&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;Git和GitHub是什么&lt;/h3&gt;
      &lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt; (/ɡɪt/) is a distributed version-control system for tracking changes in source code during software development.  –wikipedia&lt;br&gt;&lt;strong&gt;GIT&lt;/strong&gt;是一个分布式版本控制系统用于跟踪的变化系统的源代码中的软件开发。–维基百科&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GitHub&lt;/strong&gt; is an American company that provides hosting for software development. Github includes version control using Git, which allows software projects to keep track of all versions and revert to previous versions if necessary.  –wikipedia&lt;br&gt;&lt;strong&gt;GitHub&lt;/strong&gt;是一家美国公司，为软件开发提供托管。GitHub包含使用Git进行的版本控制，该版本控制允许软件项目跟踪所有版本，并在必要时还原为以前的版本。–维基百科&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用人话说Git是啥&lt;/strong&gt;&lt;br&gt;Git是一种分布式版本控制系统。但它的核心其实是数据库。Git把我们的每一次提交记录到数据库中。我们可以通过对数据库进行查询来了解并回溯每一次提交，这就实现了版本控制。然后我们可以选择将这个数据库完整的克隆到另一台服务器上，这就实现了分布式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://mikyming.online/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术探究" scheme="https://mikyming.online/tags/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>docker</title>
    <link href="https://mikyming.online/2019/11/26/docker/"/>
    <id>https://mikyming.online/2019/11/26/docker/</id>
    <published>2019-11-26T11:42:13.000Z</published>
    <updated>2020-04-03T09:03:11.323Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>开一个新坑</em></strong></p><p>// 学完没啥整理的欲望。。。还是太浅了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;em&gt;开一个新坑&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;// 学完没啥整理的欲望。。。还是太浅了&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="技术" scheme="https://mikyming.online/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术探究" scheme="https://mikyming.online/tags/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>Start！</title>
    <link href="https://mikyming.online/2019/11/25/Start/"/>
    <id>https://mikyming.online/2019/11/25/Start/</id>
    <published>2019-11-25T12:28:32.000Z</published>
    <updated>2020-04-20T11:45:31.830Z</updated>
    
    <content type="html"><![CDATA[<p>总之还是决定开始写博客。 // 虽然还是偷懒用了GitHub Page</p><p>本博客已经迁移，在完成搭建前不定时更新。</p><p>联系请通过邮件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;总之还是决定开始写博客。 // 虽然还是偷懒用了GitHub Page&lt;/p&gt;
&lt;p&gt;本博客已经迁移，在完成搭建前不定时更新。&lt;/p&gt;
&lt;p&gt;联系请通过邮件。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="随笔" scheme="https://mikyming.online/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="瞎写" scheme="https://mikyming.online/tags/%E7%9E%8E%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>Hello world</title>
    <link href="https://mikyming.online/2019/11/25/Hello%20world/"/>
    <id>https://mikyming.online/2019/11/25/Hello%20world/</id>
    <published>2019-11-25T12:16:18.000Z</published>
    <updated>2020-06-01T12:14:10.356Z</updated>
    
    <content type="html"><![CDATA[<p>博客的大致框架：<br>    categoies: 技术 随笔 读书<br>    tags: [技术探究] [解决方案] [思考] [随笔]</p><a id="more"></a><p>这里啥也没有。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博客的大致框架：&lt;br&gt;    categoies: 技术 随笔 读书&lt;br&gt;    tags: [技术探究] [解决方案] [思考] [随笔]&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://mikyming.online/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://mikyming.online/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
